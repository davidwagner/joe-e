// This file is auto-generated by the Joe-E builder based on the taming
// database (safej files), and should not be edited directly.
package org.joe_e.taming;

import java.util.HashMap;
import java.util.HashSet;

public class Policy {
    private Policy() {}

    private static HashMap<String, String[]> honoraries = 
        new HashMap<String, String[]>();
    private static HashSet<String> fields = new HashSet<String>();
    private static HashSet<String> constructors = new HashSet<String>();
    private static HashSet<String> methods = new HashSet<String>();

    public static boolean hasHonorary(String type, String honorary) {
        if (honoraries.containsKey(type)) {
            for (String hon : honoraries.get(type)) {
                if (hon.equals(honorary)) {
                    return true;
                }
            }
        }
        return false;
    }

    public static boolean fieldEnabled(String fieldSig) {
        return fields.contains(fieldSig);
    }

    public static boolean constructorEnabled(String ctorSig) {
        return constructors.contains(ctorSig);
    }

    public static boolean methodEnabled(String methodSig) {
        return methods.contains(methodSig);
    }

    static {
        // Type java.io.BufferedInputStream

        // Type java.io.BufferedOutputStream

        // Type java.io.BufferedReader
        constructors.add("java.io.BufferedReader(Reader)");
        methods.add("java.io.BufferedReader.readLine()");

        // Type java.io.BufferedWriter

        // Type java.io.ByteArrayInputStream

        // Type java.io.ByteArrayOutputStream

        // Type java.io.CharArrayReader

        // Type java.io.CharArrayWriter

        // Type java.io.CharConversionException

        // Type java.io.Closeable

        // Type java.io.DataInput

        // Type java.io.DataInputStream

        // Type java.io.DataOutput

        // Type java.io.DataOutputStream

        // Type java.io.EOFException

        // Type java.io.Externalizable

        // Type java.io.File
        methods.add("java.io.File.getName()");
        methods.add("java.io.File.delete()");

        // Type java.io.FileDescriptor

        // Type java.io.FileFilter

        // Type java.io.FileInputStream

        // Type java.io.FileNotFoundException

        // Type java.io.FileOutputStream

        // Type java.io.FilePermission

        // Type java.io.FileReader

        // Type java.io.FileWriter

        // Type java.io.FilenameFilter

        // Type java.io.FilterInputStream

        // Type java.io.FilterOutputStream

        // Type java.io.FilterReader

        // Type java.io.FilterWriter

        // Type java.io.Flushable

        // Type java.io.IOException

        // Type java.io.InputStream

        // Type java.io.InputStreamReader

        // Type java.io.InterruptedIOException

        // Type java.io.InvalidClassException

        // Type java.io.InvalidObjectException

        // Type java.io.LineNumberInputStream

        // Type java.io.LineNumberReader

        // Type java.io.NotActiveException

        // Type java.io.NotSerializableException

        // Type java.io.ObjectInput

        // Type java.io.ObjectInputStream

        // Type java.io.ObjectInputStream$GetField

        // Type java.io.ObjectInputValidation

        // Type java.io.ObjectOutput

        // Type java.io.ObjectOutputStream

        // Type java.io.ObjectOutputStream$PutField

        // Type java.io.ObjectStreamClass

        // Type java.io.ObjectStreamConstants

        // Type java.io.ObjectStreamException

        // Type java.io.ObjectStreamField

        // Type java.io.OptionalDataException

        // Type java.io.OutputStream

        // Type java.io.OutputStreamWriter

        // Type java.io.PipedInputStream

        // Type java.io.PipedOutputStream

        // Type java.io.PipedReader

        // Type java.io.PipedWriter

        // Type java.io.PrintStream

        // Type java.io.PrintWriter
        methods.add("java.io.PrintWriter.println(String)");
        methods.add("java.io.PrintWriter.flush()");

        // Type java.io.PushbackInputStream

        // Type java.io.PushbackReader

        // Type java.io.RandomAccessFile

        // Type java.io.Reader

        // Type java.io.SequenceInputStream

        // Type java.io.Serializable

        // Type java.io.SerializablePermission

        // Type java.io.StreamCorruptedException

        // Type java.io.StreamTokenizer

        // Type java.io.StringBufferInputStream

        // Type java.io.StringReader

        // Type java.io.StringWriter

        // Type java.io.SyncFailedException

        // Type java.io.UTFDataFormatException

        // Type java.io.UnsupportedEncodingException

        // Type java.io.WriteAbortedException

        // Type java.io.Writer
        methods.add("java.io.Writer.append(char)");
        methods.add("java.io.Writer.flush()");

        // Type java.lang.AbstractMethodError
        honoraries.put("java.lang.AbstractMethodError", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.Appendable

        // Type java.lang.ArithmeticException
        honoraries.put("java.lang.ArithmeticException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.ArrayIndexOutOfBoundsException
        honoraries.put("java.lang.ArrayIndexOutOfBoundsException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.ArrayStoreException
        honoraries.put("java.lang.ArrayStoreException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.AssertionError
        honoraries.put("java.lang.AssertionError", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});
        constructors.add("java.lang.AssertionError(double)");
        constructors.add("java.lang.AssertionError()");
        constructors.add("java.lang.AssertionError(boolean)");
        constructors.add("java.lang.AssertionError(int)");
        constructors.add("java.lang.AssertionError(long)");
        constructors.add("java.lang.AssertionError(char)");
        constructors.add("java.lang.AssertionError(float)");

        // Type java.lang.Boolean
        honoraries.put("java.lang.Boolean", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless", "org.joe_e.Selfless"});
        fields.add("java.lang.Boolean.TRUE");
        fields.add("java.lang.Boolean.TYPE");
        fields.add("java.lang.Boolean.FALSE");
        constructors.add("java.lang.Boolean(boolean)");
        constructors.add("java.lang.Boolean(String)");
        methods.add("java.lang.Boolean.compareTo(Boolean)");
        methods.add("java.lang.Boolean.booleanValue()");
        methods.add("java.lang.Boolean.toString()");
        methods.add("java.lang.Boolean.hashCode()");
        methods.add("java.lang.Boolean.valueOf(boolean)");
        methods.add("java.lang.Boolean.equals(Object)");
        methods.add("java.lang.Boolean.valueOf(String)");
        methods.add("java.lang.Boolean.parseBoolean(String)");
        methods.add("java.lang.Boolean.toString(boolean)");

        // Type java.lang.Byte
        honoraries.put("java.lang.Byte", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless", "org.joe_e.Selfless"});
        fields.add("java.lang.Byte.SIZE");
        fields.add("java.lang.Byte.MIN_VALUE");
        fields.add("java.lang.Byte.MAX_VALUE");
        fields.add("java.lang.Byte.TYPE");
        constructors.add("java.lang.Byte(String)");
        constructors.add("java.lang.Byte(byte)");
        methods.add("java.lang.Byte.parseByte(String)");
        methods.add("java.lang.Byte.toString(byte)");
        methods.add("java.lang.Byte.compareTo(Byte)");
        methods.add("java.lang.Byte.longValue()");
        methods.add("java.lang.Byte.valueOf(String, int)");
        methods.add("java.lang.Byte.byteValue()");
        methods.add("java.lang.Byte.decode(String)");
        methods.add("java.lang.Byte.parseByte(String, int)");
        methods.add("java.lang.Byte.hashCode()");
        methods.add("java.lang.Byte.valueOf(String)");
        methods.add("java.lang.Byte.valueOf(byte)");
        methods.add("java.lang.Byte.doubleValue()");
        methods.add("java.lang.Byte.shortValue()");
        methods.add("java.lang.Byte.toString()");
        methods.add("java.lang.Byte.intValue()");
        methods.add("java.lang.Byte.floatValue()");
        methods.add("java.lang.Byte.equals(Object)");

        // Type java.lang.CharSequence

        // Type java.lang.Character
        honoraries.put("java.lang.Character", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless", "org.joe_e.Selfless"});
        fields.add("java.lang.Character.END_PUNCTUATION");
        fields.add("java.lang.Character.PRIVATE_USE");
        fields.add("java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING");
        fields.add("java.lang.Character.OTHER_SYMBOL");
        fields.add("java.lang.Character.TITLECASE_LETTER");
        fields.add("java.lang.Character.FINAL_QUOTE_PUNCTUATION");
        fields.add("java.lang.Character.ENCLOSING_MARK");
        fields.add("java.lang.Character.MIN_VALUE");
        fields.add("java.lang.Character.MAX_RADIX");
        fields.add("java.lang.Character.SURROGATE");
        fields.add("java.lang.Character.LOWERCASE_LETTER");
        fields.add("java.lang.Character.DIRECTIONALITY_POP_DIRECTIONAL_FORMAT");
        fields.add("java.lang.Character.DIRECTIONALITY_OTHER_NEUTRALS");
        fields.add("java.lang.Character.MAX_HIGH_SURROGATE");
        fields.add("java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR");
        fields.add("java.lang.Character.MIN_CODE_POINT");
        fields.add("java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT");
        fields.add("java.lang.Character.TYPE");
        fields.add("java.lang.Character.MIN_RADIX");
        fields.add("java.lang.Character.SIZE");
        fields.add("java.lang.Character.DIRECTIONALITY_SEGMENT_SEPARATOR");
        fields.add("java.lang.Character.DASH_PUNCTUATION");
        fields.add("java.lang.Character.OTHER_NUMBER");
        fields.add("java.lang.Character.DIRECTIONALITY_ARABIC_NUMBER");
        fields.add("java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING");
        fields.add("java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE");
        fields.add("java.lang.Character.LETTER_NUMBER");
        fields.add("java.lang.Character.DIRECTIONALITY_BOUNDARY_NEUTRAL");
        fields.add("java.lang.Character.MAX_SURROGATE");
        fields.add("java.lang.Character.OTHER_PUNCTUATION");
        fields.add("java.lang.Character.START_PUNCTUATION");
        fields.add("java.lang.Character.DIRECTIONALITY_WHITESPACE");
        fields.add("java.lang.Character.MIN_LOW_SURROGATE");
        fields.add("java.lang.Character.DIRECTIONALITY_PARAGRAPH_SEPARATOR");
        fields.add("java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR");
        fields.add("java.lang.Character.MAX_VALUE");
        fields.add("java.lang.Character.CONTROL");
        fields.add("java.lang.Character.DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE");
        fields.add("java.lang.Character.MAX_CODE_POINT");
        fields.add("java.lang.Character.MATH_SYMBOL");
        fields.add("java.lang.Character.COMBINING_SPACING_MARK");
        fields.add("java.lang.Character.MODIFIER_LETTER");
        fields.add("java.lang.Character.PARAGRAPH_SEPARATOR");
        fields.add("java.lang.Character.MODIFIER_SYMBOL");
        fields.add("java.lang.Character.DIRECTIONALITY_UNDEFINED");
        fields.add("java.lang.Character.OTHER_LETTER");
        fields.add("java.lang.Character.MIN_SURROGATE");
        fields.add("java.lang.Character.MAX_LOW_SURROGATE");
        fields.add("java.lang.Character.DIRECTIONALITY_COMMON_NUMBER_SEPARATOR");
        fields.add("java.lang.Character.FORMAT");
        fields.add("java.lang.Character.DECIMAL_DIGIT_NUMBER");
        fields.add("java.lang.Character.MIN_HIGH_SURROGATE");
        fields.add("java.lang.Character.NON_SPACING_MARK");
        fields.add("java.lang.Character.UNASSIGNED");
        fields.add("java.lang.Character.DIRECTIONALITY_NONSPACING_MARK");
        fields.add("java.lang.Character.INITIAL_QUOTE_PUNCTUATION");
        fields.add("java.lang.Character.CURRENCY_SYMBOL");
        fields.add("java.lang.Character.DIRECTIONALITY_EUROPEAN_NUMBER");
        fields.add("java.lang.Character.MIN_SUPPLEMENTARY_CODE_POINT");
        fields.add("java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT");
        fields.add("java.lang.Character.CONNECTOR_PUNCTUATION");
        fields.add("java.lang.Character.SPACE_SEPARATOR");
        fields.add("java.lang.Character.LINE_SEPARATOR");
        fields.add("java.lang.Character.DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC");
        fields.add("java.lang.Character.UPPERCASE_LETTER");
        constructors.add("java.lang.Character(char)");
        methods.add("java.lang.Character.isIdentifierIgnorable(int)");
        methods.add("java.lang.Character.toLowerCase(char)");
        methods.add("java.lang.Character.isJavaIdentifierStart(char)");
        methods.add("java.lang.Character.isLowerCase(int)");
        methods.add("java.lang.Character.isSpaceChar(int)");
        methods.add("java.lang.Character.toChars(int, char[], int)");
        methods.add("java.lang.Character.isUpperCase(int)");
        methods.add("java.lang.Character.valueOf(char)");
        methods.add("java.lang.Character.isUnicodeIdentifierStart(char)");
        methods.add("java.lang.Character.equals(Object)");
        methods.add("java.lang.Character.isJavaIdentifierStart(int)");
        methods.add("java.lang.Character.charCount(int)");
        methods.add("java.lang.Character.isJavaIdentifierPart(int)");
        methods.add("java.lang.Character.isWhitespace(int)");
        methods.add("java.lang.Character.offsetByCodePoints(char[], int, int, int, int)");
        methods.add("java.lang.Character.isISOControl(int)");
        methods.add("java.lang.Character.isSupplementaryCodePoint(int)");
        methods.add("java.lang.Character.isISOControl(char)");
        methods.add("java.lang.Character.toCodePoint(char, char)");
        methods.add("java.lang.Character.codePointCount(char[], int, int)");
        methods.add("java.lang.Character.getDirectionality(int)");
        methods.add("java.lang.Character.codePointBefore(char[], int)");
        methods.add("java.lang.Character.compareTo(Character)");
        methods.add("java.lang.Character.codePointAt(char[], int)");
        methods.add("java.lang.Character.toUpperCase(int)");
        methods.add("java.lang.Character.isUnicodeIdentifierPart(int)");
        methods.add("java.lang.Character.toString()");
        methods.add("java.lang.Character.isLetter(char)");
        methods.add("java.lang.Character.toUpperCase(char)");
        methods.add("java.lang.Character.toTitleCase(char)");
        methods.add("java.lang.Character.isHighSurrogate(char)");
        methods.add("java.lang.Character.getNumericValue(int)");
        methods.add("java.lang.Character.toLowerCase(int)");
        methods.add("java.lang.Character.hashCode()");
        methods.add("java.lang.Character.isValidCodePoint(int)");
        methods.add("java.lang.Character.codePointAt(char[], int, int)");
        methods.add("java.lang.Character.digit(char, int)");
        methods.add("java.lang.Character.codePointBefore(CharSequence, int)");
        methods.add("java.lang.Character.isIdentifierIgnorable(char)");
        methods.add("java.lang.Character.isLetterOrDigit(char)");
        methods.add("java.lang.Character.forDigit(int, int)");
        methods.add("java.lang.Character.isMirrored(char)");
        methods.add("java.lang.Character.getType(int)");
        methods.add("java.lang.Character.digit(int, int)");
        methods.add("java.lang.Character.isUpperCase(char)");
        methods.add("java.lang.Character.isTitleCase(char)");
        methods.add("java.lang.Character.isUnicodeIdentifierPart(char)");
        methods.add("java.lang.Character.reverseBytes(char)");
        methods.add("java.lang.Character.isSurrogatePair(char, char)");
        methods.add("java.lang.Character.codePointBefore(char[], int, int)");
        methods.add("java.lang.Character.isJavaIdentifierPart(char)");
        methods.add("java.lang.Character.isDefined(int)");
        methods.add("java.lang.Character.offsetByCodePoints(CharSequence, int, int)");
        methods.add("java.lang.Character.isLetterOrDigit(int)");
        methods.add("java.lang.Character.isMirrored(int)");
        methods.add("java.lang.Character.getDirectionality(char)");
        methods.add("java.lang.Character.isSpace(char)");
        methods.add("java.lang.Character.isDigit(char)");
        methods.add("java.lang.Character.isWhitespace(char)");
        methods.add("java.lang.Character.charValue()");
        methods.add("java.lang.Character.getNumericValue(char)");
        methods.add("java.lang.Character.isDigit(int)");
        methods.add("java.lang.Character.isLowSurrogate(char)");
        methods.add("java.lang.Character.toChars(int)");
        methods.add("java.lang.Character.isLowerCase(char)");
        methods.add("java.lang.Character.codePointCount(CharSequence, int, int)");
        methods.add("java.lang.Character.getType(char)");
        methods.add("java.lang.Character.isLetter(int)");
        methods.add("java.lang.Character.isUnicodeIdentifierStart(int)");
        methods.add("java.lang.Character.codePointAt(CharSequence, int)");
        methods.add("java.lang.Character.toString(char)");
        methods.add("java.lang.Character.isSpaceChar(char)");
        methods.add("java.lang.Character.isTitleCase(int)");
        methods.add("java.lang.Character.toTitleCase(int)");
        methods.add("java.lang.Character.isDefined(char)");

        // Type java.lang.Character$Subset
        methods.add("java.lang.Character$Subset.equals(Object)");

        // Type java.lang.Character$UnicodeBlock

        // Type java.lang.Class
        honoraries.put("java.lang.Class", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless", "org.joe_e.Equatable"});
        methods.add("java.lang.Class.isAnnotation()");
        methods.add("java.lang.Class.getEnclosingClass()");
        methods.add("java.lang.Class.isSynthetic()");
        methods.add("java.lang.Class.getInterfaces()");
        methods.add("java.lang.Class.getTypeParameters()");
        methods.add("java.lang.Class.isAnonymousClass()");
        methods.add("java.lang.Class.getDeclaringClass()");
        methods.add("java.lang.Class.getSuperclass()");
        methods.add("java.lang.Class.isInterface()");
        methods.add("java.lang.Class.isAssignableFrom(Class<?>)");
        methods.add("java.lang.Class.asSubclass(Class<U>)");
        methods.add("java.lang.Class.getGenericInterfaces()");
        methods.add("java.lang.Class.cast(Object)");
        methods.add("java.lang.Class.isLocalClass()");
        methods.add("java.lang.Class.isPrimitive()");
        methods.add("java.lang.Class.isEnum()");
        methods.add("java.lang.Class.isArray()");
        methods.add("java.lang.Class.getComponentType()");
        methods.add("java.lang.Class.getModifiers()");
        methods.add("java.lang.Class.isMemberClass()");
        methods.add("java.lang.Class.getPackage()");
        methods.add("java.lang.Class.isInstance(Object)");
        methods.add("java.lang.Class.getGenericSuperclass()");

        // Type java.lang.ClassCastException
        honoraries.put("java.lang.ClassCastException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});
        constructors.add("java.lang.ClassCastException(String)");
        constructors.add("java.lang.ClassCastException()");

        // Type java.lang.ClassCircularityError
        honoraries.put("java.lang.ClassCircularityError", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.ClassFormatError
        honoraries.put("java.lang.ClassFormatError", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.ClassLoader

        // Type java.lang.ClassNotFoundException
        honoraries.put("java.lang.ClassNotFoundException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});
        constructors.add("java.lang.ClassNotFoundException()");
        constructors.add("java.lang.ClassNotFoundException(String, Throwable)");
        constructors.add("java.lang.ClassNotFoundException(String)");
        methods.add("java.lang.ClassNotFoundException.getCause()");
        methods.add("java.lang.ClassNotFoundException.getException()");

        // Type java.lang.CloneNotSupportedException
        honoraries.put("java.lang.CloneNotSupportedException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.Cloneable

        // Type java.lang.Comparable

        // Type java.lang.Compiler

        // Type java.lang.Deprecated

        // Type java.lang.Double
        honoraries.put("java.lang.Double", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless", "org.joe_e.Selfless"});
        fields.add("java.lang.Double.NaN");
        fields.add("java.lang.Double.SIZE");
        fields.add("java.lang.Double.MAX_VALUE");
        fields.add("java.lang.Double.MIN_VALUE");
        fields.add("java.lang.Double.POSITIVE_INFINITY");
        fields.add("java.lang.Double.NEGATIVE_INFINITY");
        fields.add("java.lang.Double.TYPE");
        constructors.add("java.lang.Double(String)");
        constructors.add("java.lang.Double(double)");
        methods.add("java.lang.Double.isInfinite()");
        methods.add("java.lang.Double.doubleToLongBits(double)");
        methods.add("java.lang.Double.isNaN()");
        methods.add("java.lang.Double.toHexString(double)");
        methods.add("java.lang.Double.hashCode()");
        methods.add("java.lang.Double.valueOf(double)");
        methods.add("java.lang.Double.compareTo(Double)");
        methods.add("java.lang.Double.isInfinite(double)");
        methods.add("java.lang.Double.toString(double)");
        methods.add("java.lang.Double.valueOf(String)");
        methods.add("java.lang.Double.longBitsToDouble(long)");
        methods.add("java.lang.Double.parseDouble(String)");
        methods.add("java.lang.Double.shortValue()");
        methods.add("java.lang.Double.toString()");
        methods.add("java.lang.Double.doubleToRawLongBits(double)");
        methods.add("java.lang.Double.doubleValue()");
        methods.add("java.lang.Double.equals(Object)");
        methods.add("java.lang.Double.isNaN(double)");
        methods.add("java.lang.Double.longValue()");
        methods.add("java.lang.Double.compare(double, double)");
        methods.add("java.lang.Double.byteValue()");
        methods.add("java.lang.Double.floatValue()");
        methods.add("java.lang.Double.intValue()");

        // Type java.lang.Enum
        honoraries.put("java.lang.Enum", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless", "org.joe_e.Equatable"});
        methods.add("java.lang.Enum.equals(Object)");
        methods.add("java.lang.Enum.clone()");
        methods.add("java.lang.Enum.getDeclaringClass()");
        methods.add("java.lang.Enum.name()");
        methods.add("java.lang.Enum.compareTo(E)");

        // Type java.lang.EnumConstantNotPresentException
        honoraries.put("java.lang.EnumConstantNotPresentException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.Error
        honoraries.put("java.lang.Error", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});
        constructors.add("java.lang.Error()");
        constructors.add("java.lang.Error(String, Throwable)");
        constructors.add("java.lang.Error(String)");
        constructors.add("java.lang.Error(Throwable)");

        // Type java.lang.Exception
        honoraries.put("java.lang.Exception", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});
        constructors.add("java.lang.Exception(String)");
        constructors.add("java.lang.Exception(Throwable)");
        constructors.add("java.lang.Exception()");
        constructors.add("java.lang.Exception(String, Throwable)");

        // Type java.lang.ExceptionInInitializerError
        honoraries.put("java.lang.ExceptionInInitializerError", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});
        constructors.add("java.lang.ExceptionInInitializerError(Throwable)");
        constructors.add("java.lang.ExceptionInInitializerError(String)");
        constructors.add("java.lang.ExceptionInInitializerError()");
        methods.add("java.lang.ExceptionInInitializerError.getCause()");
        methods.add("java.lang.ExceptionInInitializerError.getException()");

        // Type java.lang.Float
        honoraries.put("java.lang.Float", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless", "org.joe_e.Selfless"});
        fields.add("java.lang.Float.SIZE");
        fields.add("java.lang.Float.MIN_VALUE");
        fields.add("java.lang.Float.NEGATIVE_INFINITY");
        fields.add("java.lang.Float.NaN");
        fields.add("java.lang.Float.POSITIVE_INFINITY");
        fields.add("java.lang.Float.MAX_VALUE");
        fields.add("java.lang.Float.TYPE");
        constructors.add("java.lang.Float(float)");
        constructors.add("java.lang.Float(String)");
        constructors.add("java.lang.Float(double)");
        methods.add("java.lang.Float.isNaN()");
        methods.add("java.lang.Float.shortValue()");
        methods.add("java.lang.Float.equals(Object)");
        methods.add("java.lang.Float.floatToRawIntBits(float)");
        methods.add("java.lang.Float.longValue()");
        methods.add("java.lang.Float.valueOf(String)");
        methods.add("java.lang.Float.toString(float)");
        methods.add("java.lang.Float.floatToIntBits(float)");
        methods.add("java.lang.Float.intValue()");
        methods.add("java.lang.Float.toString()");
        methods.add("java.lang.Float.parseFloat(String)");
        methods.add("java.lang.Float.compareTo(Float)");
        methods.add("java.lang.Float.byteValue()");
        methods.add("java.lang.Float.valueOf(float)");
        methods.add("java.lang.Float.isInfinite(float)");
        methods.add("java.lang.Float.isInfinite()");
        methods.add("java.lang.Float.floatValue()");
        methods.add("java.lang.Float.compare(float, float)");
        methods.add("java.lang.Float.isNaN(float)");
        methods.add("java.lang.Float.doubleValue()");
        methods.add("java.lang.Float.toHexString(float)");
        methods.add("java.lang.Float.intBitsToFloat(int)");
        methods.add("java.lang.Float.hashCode()");

        // Type java.lang.IllegalAccessError
        honoraries.put("java.lang.IllegalAccessError", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.IllegalAccessException
        honoraries.put("java.lang.IllegalAccessException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.IllegalArgumentException
        honoraries.put("java.lang.IllegalArgumentException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});
        constructors.add("java.lang.IllegalArgumentException(Throwable)");
        constructors.add("java.lang.IllegalArgumentException(String, Throwable)");
        constructors.add("java.lang.IllegalArgumentException(String)");
        constructors.add("java.lang.IllegalArgumentException()");

        // Type java.lang.IllegalMonitorStateException
        honoraries.put("java.lang.IllegalMonitorStateException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.IllegalStateException
        honoraries.put("java.lang.IllegalStateException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.IllegalThreadStateException
        honoraries.put("java.lang.IllegalThreadStateException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.IncompatibleClassChangeError
        honoraries.put("java.lang.IncompatibleClassChangeError", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.IndexOutOfBoundsException
        honoraries.put("java.lang.IndexOutOfBoundsException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.InheritableThreadLocal

        // Type java.lang.InstantiationError
        honoraries.put("java.lang.InstantiationError", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.InstantiationException
        honoraries.put("java.lang.InstantiationException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.Integer
        honoraries.put("java.lang.Integer", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless", "org.joe_e.Selfless"});
        fields.add("java.lang.Integer.SIZE");
        fields.add("java.lang.Integer.MAX_VALUE");
        fields.add("java.lang.Integer.MIN_VALUE");
        fields.add("java.lang.Integer.TYPE");
        constructors.add("java.lang.Integer(int)");
        constructors.add("java.lang.Integer(String)");
        methods.add("java.lang.Integer.toString(int)");
        methods.add("java.lang.Integer.reverseBytes(int)");
        methods.add("java.lang.Integer.shortValue()");
        methods.add("java.lang.Integer.rotateRight(int, int)");
        methods.add("java.lang.Integer.rotateLeft(int, int)");
        methods.add("java.lang.Integer.toString()");
        methods.add("java.lang.Integer.intValue()");
        methods.add("java.lang.Integer.numberOfLeadingZeros(int)");
        methods.add("java.lang.Integer.doubleValue()");
        methods.add("java.lang.Integer.compareTo(Integer)");
        methods.add("java.lang.Integer.parseInt(String, int)");
        methods.add("java.lang.Integer.toBinaryString(int)");
        methods.add("java.lang.Integer.toString(int, int)");
        methods.add("java.lang.Integer.reverse(int)");
        methods.add("java.lang.Integer.toOctalString(int)");
        methods.add("java.lang.Integer.valueOf(int)");
        methods.add("java.lang.Integer.equals(Object)");
        methods.add("java.lang.Integer.longValue()");
        methods.add("java.lang.Integer.toHexString(int)");
        methods.add("java.lang.Integer.valueOf(String)");
        methods.add("java.lang.Integer.valueOf(String, int)");
        methods.add("java.lang.Integer.decode(String)");
        methods.add("java.lang.Integer.lowestOneBit(int)");
        methods.add("java.lang.Integer.hashCode()");
        methods.add("java.lang.Integer.parseInt(String)");
        methods.add("java.lang.Integer.byteValue()");
        methods.add("java.lang.Integer.numberOfTrailingZeros(int)");
        methods.add("java.lang.Integer.highestOneBit(int)");
        methods.add("java.lang.Integer.floatValue()");
        methods.add("java.lang.Integer.bitCount(int)");
        methods.add("java.lang.Integer.signum(int)");

        // Type java.lang.InternalError
        honoraries.put("java.lang.InternalError", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.InterruptedException
        honoraries.put("java.lang.InterruptedException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.Iterable

        // Type java.lang.LinkageError
        honoraries.put("java.lang.LinkageError", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.Long
        honoraries.put("java.lang.Long", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless", "org.joe_e.Selfless"});
        fields.add("java.lang.Long.SIZE");
        fields.add("java.lang.Long.TYPE");
        fields.add("java.lang.Long.MIN_VALUE");
        fields.add("java.lang.Long.MAX_VALUE");
        constructors.add("java.lang.Long(String)");
        constructors.add("java.lang.Long(long)");
        methods.add("java.lang.Long.signum(long)");
        methods.add("java.lang.Long.highestOneBit(long)");
        methods.add("java.lang.Long.hashCode()");
        methods.add("java.lang.Long.reverse(long)");
        methods.add("java.lang.Long.rotateRight(long, int)");
        methods.add("java.lang.Long.toOctalString(long)");
        methods.add("java.lang.Long.lowestOneBit(long)");
        methods.add("java.lang.Long.floatValue()");
        methods.add("java.lang.Long.rotateLeft(long, int)");
        methods.add("java.lang.Long.toBinaryString(long)");
        methods.add("java.lang.Long.parseLong(String)");
        methods.add("java.lang.Long.toString(long)");
        methods.add("java.lang.Long.shortValue()");
        methods.add("java.lang.Long.doubleValue()");
        methods.add("java.lang.Long.longValue()");
        methods.add("java.lang.Long.bitCount(long)");
        methods.add("java.lang.Long.compareTo(Long)");
        methods.add("java.lang.Long.equals(Object)");
        methods.add("java.lang.Long.reverseBytes(long)");
        methods.add("java.lang.Long.decode(String)");
        methods.add("java.lang.Long.parseLong(String, int)");
        methods.add("java.lang.Long.numberOfLeadingZeros(long)");
        methods.add("java.lang.Long.byteValue()");
        methods.add("java.lang.Long.toString()");
        methods.add("java.lang.Long.valueOf(String)");
        methods.add("java.lang.Long.intValue()");
        methods.add("java.lang.Long.toHexString(long)");
        methods.add("java.lang.Long.numberOfTrailingZeros(long)");
        methods.add("java.lang.Long.valueOf(long)");
        methods.add("java.lang.Long.toString(long, int)");
        methods.add("java.lang.Long.valueOf(String, int)");

        // Type java.lang.Math

        // Type java.lang.NegativeArraySizeException
        honoraries.put("java.lang.NegativeArraySizeException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.NoClassDefFoundError
        honoraries.put("java.lang.NoClassDefFoundError", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.NoSuchFieldError
        honoraries.put("java.lang.NoSuchFieldError", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.NoSuchFieldException
        honoraries.put("java.lang.NoSuchFieldException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.NoSuchMethodError
        honoraries.put("java.lang.NoSuchMethodError", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.NoSuchMethodException
        honoraries.put("java.lang.NoSuchMethodException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.NullPointerException
        honoraries.put("java.lang.NullPointerException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});
        constructors.add("java.lang.NullPointerException()");
        constructors.add("java.lang.NullPointerException(String)");

        // Type java.lang.Number
        honoraries.put("java.lang.Number", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless", "org.joe_e.Selfless"});
        methods.add("java.lang.Number.floatValue()");
        methods.add("java.lang.Number.byteValue()");
        methods.add("java.lang.Number.longValue()");
        methods.add("java.lang.Number.shortValue()");
        methods.add("java.lang.Number.doubleValue()");
        methods.add("java.lang.Number.intValue()");

        // Type java.lang.NumberFormatException
        honoraries.put("java.lang.NumberFormatException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.Object
        constructors.add("java.lang.Object()");
        methods.add("java.lang.Object.equals(Object)");
        methods.add("java.lang.Object.clone()");
        methods.add("java.lang.Object.getClass()");

        // Type java.lang.OutOfMemoryError
        honoraries.put("java.lang.OutOfMemoryError", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.Override

        // Type java.lang.Package

        // Type java.lang.Process

        // Type java.lang.ProcessBuilder

        // Type java.lang.Readable

        // Type java.lang.Runnable

        // Type java.lang.Runtime

        // Type java.lang.RuntimeException
        honoraries.put("java.lang.RuntimeException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});
        constructors.add("java.lang.RuntimeException(Throwable)");
        constructors.add("java.lang.RuntimeException()");
        constructors.add("java.lang.RuntimeException(String, Throwable)");
        constructors.add("java.lang.RuntimeException(String)");

        // Type java.lang.RuntimePermission

        // Type java.lang.SecurityException
        honoraries.put("java.lang.SecurityException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.SecurityManager

        // Type java.lang.Short
        honoraries.put("java.lang.Short", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless", "org.joe_e.Selfless"});
        fields.add("java.lang.Short.SIZE");
        fields.add("java.lang.Short.TYPE");
        fields.add("java.lang.Short.MIN_VALUE");
        fields.add("java.lang.Short.MAX_VALUE");
        constructors.add("java.lang.Short(short)");
        constructors.add("java.lang.Short(String)");
        methods.add("java.lang.Short.equals(Object)");
        methods.add("java.lang.Short.parseShort(String, int)");
        methods.add("java.lang.Short.toString()");
        methods.add("java.lang.Short.parseShort(String)");
        methods.add("java.lang.Short.valueOf(String, int)");
        methods.add("java.lang.Short.floatValue()");
        methods.add("java.lang.Short.toString(short)");
        methods.add("java.lang.Short.valueOf(short)");
        methods.add("java.lang.Short.doubleValue()");
        methods.add("java.lang.Short.longValue()");
        methods.add("java.lang.Short.hashCode()");
        methods.add("java.lang.Short.byteValue()");
        methods.add("java.lang.Short.shortValue()");
        methods.add("java.lang.Short.reverseBytes(short)");
        methods.add("java.lang.Short.intValue()");
        methods.add("java.lang.Short.decode(String)");
        methods.add("java.lang.Short.valueOf(String)");
        methods.add("java.lang.Short.compareTo(Short)");

        // Type java.lang.StackOverflowError
        honoraries.put("java.lang.StackOverflowError", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.StackTraceElement
        methods.add("java.lang.StackTraceElement.equals(Object)");

        // Type java.lang.StrictMath

        // Type java.lang.String
        honoraries.put("java.lang.String", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless", "org.joe_e.Selfless"});
        fields.add("java.lang.String.CASE_INSENSITIVE_ORDER");
        constructors.add("java.lang.String(char[], int, int)");
        constructors.add("java.lang.String(char[])");
        constructors.add("java.lang.String(StringBuffer)");
        constructors.add("java.lang.String(StringBuilder)");
        constructors.add("java.lang.String(String)");
        constructors.add("java.lang.String()");
        methods.add("java.lang.String.toString()");
        methods.add("java.lang.String.hashCode()");
        methods.add("java.lang.String.length()");
        methods.add("java.lang.String.indexOf(String)");
        methods.add("java.lang.String.compareTo(String)");
        methods.add("java.lang.String.regionMatches(int, String, int, int)");
        methods.add("java.lang.String.lastIndexOf(int)");
        methods.add("java.lang.String.charAt(int)");
        methods.add("java.lang.String.equalsIgnoreCase(String)");
        methods.add("java.lang.String.valueOf(boolean)");
        methods.add("java.lang.String.indexOf(int, int)");
        methods.add("java.lang.String.copyValueOf(char[], int, int)");
        methods.add("java.lang.String.getChars(int, int, char[], int)");
        methods.add("java.lang.String.contains(CharSequence)");
        methods.add("java.lang.String.startsWith(String)");
        methods.add("java.lang.String.valueOf(long)");
        methods.add("java.lang.String.replaceAll(String, String)");
        methods.add("java.lang.String.codePointBefore(int)");
        methods.add("java.lang.String.replaceFirst(String, String)");
        methods.add("java.lang.String.trim()");
        methods.add("java.lang.String.valueOf(double)");
        methods.add("java.lang.String.valueOf(char[])");
        methods.add("java.lang.String.codePointAt(int)");
        methods.add("java.lang.String.contentEquals(CharSequence)");
        methods.add("java.lang.String.valueOf(float)");
        methods.add("java.lang.String.lastIndexOf(String)");
        methods.add("java.lang.String.lastIndexOf(int, int)");
        methods.add("java.lang.String.endsWith(String)");
        methods.add("java.lang.String.replace(char, char)");
        methods.add("java.lang.String.compareToIgnoreCase(String)");
        methods.add("java.lang.String.split(String)");
        methods.add("java.lang.String.valueOf(int)");
        methods.add("java.lang.String.copyValueOf(char[])");
        methods.add("java.lang.String.substring(int)");
        methods.add("java.lang.String.valueOf(char[], int, int)");
        methods.add("java.lang.String.codePointCount(int, int)");
        methods.add("java.lang.String.subSequence(int, int)");
        methods.add("java.lang.String.equals(Object)");
        methods.add("java.lang.String.regionMatches(boolean, int, String, int, int)");
        methods.add("java.lang.String.substring(int, int)");
        methods.add("java.lang.String.matches(String)");
        methods.add("java.lang.String.indexOf(int)");
        methods.add("java.lang.String.startsWith(String, int)");
        methods.add("java.lang.String.replace(CharSequence, CharSequence)");
        methods.add("java.lang.String.concat(String)");
        methods.add("java.lang.String.valueOf(char)");
        methods.add("java.lang.String.indexOf(String, int)");
        methods.add("java.lang.String.contentEquals(StringBuffer)");
        methods.add("java.lang.String.toCharArray()");
        methods.add("java.lang.String.lastIndexOf(String, int)");
        methods.add("java.lang.String.split(String, int)");

        // Type java.lang.StringBuffer

        // Type java.lang.StringBuilder

        // Type java.lang.StringIndexOutOfBoundsException
        honoraries.put("java.lang.StringIndexOutOfBoundsException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.SuppressWarnings

        // Type java.lang.System
        methods.add("java.lang.System.arraycopy(Object, int, Object, int, int)");

        // Type java.lang.Thread

        // Type java.lang.Thread$State
        honoraries.put("java.lang.Thread$State", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless", "org.joe_e.Equatable"});

        // Type java.lang.Thread$UncaughtExceptionHandler

        // Type java.lang.ThreadDeath
        honoraries.put("java.lang.ThreadDeath", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.ThreadGroup

        // Type java.lang.ThreadLocal

        // Type java.lang.Throwable
        honoraries.put("java.lang.Throwable", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});
        constructors.add("java.lang.Throwable(String)");
        constructors.add("java.lang.Throwable(String, Throwable)");
        constructors.add("java.lang.Throwable(Throwable)");
        constructors.add("java.lang.Throwable()");
        methods.add("java.lang.Throwable.getCause()");

        // Type java.lang.TypeNotPresentException
        honoraries.put("java.lang.TypeNotPresentException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.UnknownError
        honoraries.put("java.lang.UnknownError", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.UnsatisfiedLinkError
        honoraries.put("java.lang.UnsatisfiedLinkError", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.UnsupportedClassVersionError
        honoraries.put("java.lang.UnsupportedClassVersionError", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.UnsupportedOperationException
        honoraries.put("java.lang.UnsupportedOperationException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});
        constructors.add("java.lang.UnsupportedOperationException(String)");
        constructors.add("java.lang.UnsupportedOperationException(String, Throwable)");
        constructors.add("java.lang.UnsupportedOperationException()");
        constructors.add("java.lang.UnsupportedOperationException(Throwable)");

        // Type java.lang.VerifyError
        honoraries.put("java.lang.VerifyError", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.VirtualMachineError
        honoraries.put("java.lang.VirtualMachineError", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.Void

        // Type java.lang.annotation.Annotation
        methods.add("java.lang.annotation.Annotation.equals(Object)");
        methods.add("java.lang.annotation.Annotation.annotationType()");

        // Type java.lang.annotation.Documented

        // Type java.lang.annotation.ElementType
        honoraries.put("java.lang.annotation.ElementType", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless", "org.joe_e.Equatable"});
        fields.add("java.lang.annotation.ElementType.CONSTRUCTOR");
        fields.add("java.lang.annotation.ElementType.TYPE");
        fields.add("java.lang.annotation.ElementType.PACKAGE");
        fields.add("java.lang.annotation.ElementType.ANNOTATION_TYPE");
        fields.add("java.lang.annotation.ElementType.PARAMETER");
        fields.add("java.lang.annotation.ElementType.LOCAL_VARIABLE");
        fields.add("java.lang.annotation.ElementType.FIELD");
        fields.add("java.lang.annotation.ElementType.METHOD");
        methods.add("java.lang.annotation.ElementType.values()");
        methods.add("java.lang.annotation.ElementType.valueOf(String)");

        // Type java.lang.annotation.Inherited

        // Type java.lang.annotation.Retention

        // Type java.lang.annotation.RetentionPolicy
        honoraries.put("java.lang.annotation.RetentionPolicy", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless", "org.joe_e.Equatable"});
        fields.add("java.lang.annotation.RetentionPolicy.CLASS");
        fields.add("java.lang.annotation.RetentionPolicy.SOURCE");
        fields.add("java.lang.annotation.RetentionPolicy.RUNTIME");
        methods.add("java.lang.annotation.RetentionPolicy.valueOf(String)");
        methods.add("java.lang.annotation.RetentionPolicy.values()");

        // Type java.lang.annotation.Target

        // Type java.lang.reflect.AccessibleObject

        // Type java.lang.reflect.AnnotatedElement

        // Type java.lang.reflect.Array

        // Type java.lang.reflect.Constructor
        honoraries.put("java.lang.reflect.Constructor", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless", "org.joe_e.Selfless"});
        methods.add("java.lang.reflect.Constructor.getDeclaringClass()");
        methods.add("java.lang.reflect.Constructor.getTypeParameters()");
        methods.add("java.lang.reflect.Constructor.getGenericParameterTypes()");
        methods.add("java.lang.reflect.Constructor.getName()");
        methods.add("java.lang.reflect.Constructor.getModifiers()");
        methods.add("java.lang.reflect.Constructor.isVarArgs()");
        methods.add("java.lang.reflect.Constructor.isSynthetic()");
        methods.add("java.lang.reflect.Constructor.toGenericString()");
        methods.add("java.lang.reflect.Constructor.getParameterTypes()");
        methods.add("java.lang.reflect.Constructor.toString()");
        methods.add("java.lang.reflect.Constructor.equals(Object)");

        // Type java.lang.reflect.Field
        honoraries.put("java.lang.reflect.Field", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless", "org.joe_e.Selfless"});
        methods.add("java.lang.reflect.Field.equals(Object)");

        // Type java.lang.reflect.GenericArrayType

        // Type java.lang.reflect.GenericDeclaration
        methods.add("java.lang.reflect.GenericDeclaration.getTypeParameters()");

        // Type java.lang.reflect.GenericSignatureFormatError
        honoraries.put("java.lang.reflect.GenericSignatureFormatError", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.reflect.InvocationHandler

        // Type java.lang.reflect.InvocationTargetException
        honoraries.put("java.lang.reflect.InvocationTargetException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});
        constructors.add("java.lang.reflect.InvocationTargetException(Throwable)");
        constructors.add("java.lang.reflect.InvocationTargetException(Throwable, String)");
        constructors.add("java.lang.reflect.InvocationTargetException()");
        methods.add("java.lang.reflect.InvocationTargetException.getCause()");
        methods.add("java.lang.reflect.InvocationTargetException.getTargetException()");

        // Type java.lang.reflect.MalformedParameterizedTypeException
        honoraries.put("java.lang.reflect.MalformedParameterizedTypeException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});

        // Type java.lang.reflect.Member

        // Type java.lang.reflect.Method
        honoraries.put("java.lang.reflect.Method", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless", "org.joe_e.Selfless"});
        methods.add("java.lang.reflect.Method.hashCode()");
        methods.add("java.lang.reflect.Method.getTypeParameters()");
        methods.add("java.lang.reflect.Method.getModifiers()");
        methods.add("java.lang.reflect.Method.getGenericParameterTypes()");
        methods.add("java.lang.reflect.Method.getName()");
        methods.add("java.lang.reflect.Method.isBridge()");
        methods.add("java.lang.reflect.Method.getGenericReturnType()");
        methods.add("java.lang.reflect.Method.getDeclaringClass()");
        methods.add("java.lang.reflect.Method.getReturnType()");
        methods.add("java.lang.reflect.Method.isVarArgs()");
        methods.add("java.lang.reflect.Method.equals(Object)");
        methods.add("java.lang.reflect.Method.toGenericString()");
        methods.add("java.lang.reflect.Method.getParameterTypes()");
        methods.add("java.lang.reflect.Method.isSynthetic()");
        methods.add("java.lang.reflect.Method.toString()");

        // Type java.lang.reflect.Modifier

        // Type java.lang.reflect.ParameterizedType
        honoraries.put("java.lang.reflect.ParameterizedType", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});
        methods.add("java.lang.reflect.ParameterizedType.getRawType()");
        methods.add("java.lang.reflect.ParameterizedType.getActualTypeArguments()");
        methods.add("java.lang.reflect.ParameterizedType.getOwnerType()");

        // Type java.lang.reflect.Proxy

        // Type java.lang.reflect.ReflectPermission

        // Type java.lang.reflect.Type

        // Type java.lang.reflect.TypeVariable
        honoraries.put("java.lang.reflect.TypeVariable", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless", "org.joe_e.Selfless"});
        methods.add("java.lang.reflect.TypeVariable.getGenericDeclaration()");
        methods.add("java.lang.reflect.TypeVariable.getName()");

        // Type java.lang.reflect.UndeclaredThrowableException
        honoraries.put("java.lang.reflect.UndeclaredThrowableException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});
        constructors.add("java.lang.reflect.UndeclaredThrowableException(Throwable, String)");
        constructors.add("java.lang.reflect.UndeclaredThrowableException(Throwable)");
        methods.add("java.lang.reflect.UndeclaredThrowableException.getCause()");
        methods.add("java.lang.reflect.UndeclaredThrowableException.getUndeclaredThrowable()");

        // Type java.lang.reflect.WildcardType
        honoraries.put("java.lang.reflect.WildcardType", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});
        methods.add("java.lang.reflect.WildcardType.getUpperBounds()");

        // Type java.math.BigDecimal
        honoraries.put("java.math.BigDecimal", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless", "org.joe_e.Selfless"});
        fields.add("java.math.BigDecimal.TEN");
        fields.add("java.math.BigDecimal.ROUND_HALF_UP");
        fields.add("java.math.BigDecimal.ROUND_UP");
        fields.add("java.math.BigDecimal.ROUND_DOWN");
        fields.add("java.math.BigDecimal.ZERO");
        fields.add("java.math.BigDecimal.ROUND_UNNECESSARY");
        fields.add("java.math.BigDecimal.ROUND_HALF_EVEN");
        fields.add("java.math.BigDecimal.ROUND_FLOOR");
        fields.add("java.math.BigDecimal.ONE");
        fields.add("java.math.BigDecimal.ROUND_CEILING");
        fields.add("java.math.BigDecimal.ROUND_HALF_DOWN");
        constructors.add("java.math.BigDecimal(BigInteger)");
        constructors.add("java.math.BigDecimal(int, MathContext)");
        constructors.add("java.math.BigDecimal(String)");
        constructors.add("java.math.BigDecimal(BigInteger, int)");
        constructors.add("java.math.BigDecimal(char[], MathContext)");
        constructors.add("java.math.BigDecimal(long)");
        constructors.add("java.math.BigDecimal(char[])");
        constructors.add("java.math.BigDecimal(double)");
        constructors.add("java.math.BigDecimal(String, MathContext)");
        constructors.add("java.math.BigDecimal(double, MathContext)");
        constructors.add("java.math.BigDecimal(BigInteger, MathContext)");
        constructors.add("java.math.BigDecimal(char[], int, int)");
        constructors.add("java.math.BigDecimal(int)");
        constructors.add("java.math.BigDecimal(BigInteger, int, MathContext)");
        constructors.add("java.math.BigDecimal(char[], int, int, MathContext)");
        constructors.add("java.math.BigDecimal(long, MathContext)");
        methods.add("java.math.BigDecimal.pow(int, MathContext)");
        methods.add("java.math.BigDecimal.divide(BigDecimal)");
        methods.add("java.math.BigDecimal.negate()");
        methods.add("java.math.BigDecimal.subtract(BigDecimal)");
        methods.add("java.math.BigDecimal.negate(MathContext)");
        methods.add("java.math.BigDecimal.add(BigDecimal, MathContext)");
        methods.add("java.math.BigDecimal.divide(BigDecimal, MathContext)");
        methods.add("java.math.BigDecimal.setScale(int)");
        methods.add("java.math.BigDecimal.abs()");
        methods.add("java.math.BigDecimal.scaleByPowerOfTen(int)");
        methods.add("java.math.BigDecimal.pow(int)");
        methods.add("java.math.BigDecimal.valueOf(double)");
        methods.add("java.math.BigDecimal.plus()");
        methods.add("java.math.BigDecimal.max(BigDecimal)");
        methods.add("java.math.BigDecimal.stripTrailingZeros()");
        methods.add("java.math.BigDecimal.setScale(int, RoundingMode)");
        methods.add("java.math.BigDecimal.subtract(BigDecimal, MathContext)");
        methods.add("java.math.BigDecimal.divide(BigDecimal, int, RoundingMode)");
        methods.add("java.math.BigDecimal.min(BigDecimal)");
        methods.add("java.math.BigDecimal.intValueExact()");
        methods.add("java.math.BigDecimal.round(MathContext)");
        methods.add("java.math.BigDecimal.longValue()");
        methods.add("java.math.BigDecimal.valueOf(long, int)");
        methods.add("java.math.BigDecimal.divide(BigDecimal, RoundingMode)");
        methods.add("java.math.BigDecimal.intValue()");
        methods.add("java.math.BigDecimal.remainder(BigDecimal, MathContext)");
        methods.add("java.math.BigDecimal.setScale(int, int)");
        methods.add("java.math.BigDecimal.divideToIntegralValue(BigDecimal)");
        methods.add("java.math.BigDecimal.add(BigDecimal)");
        methods.add("java.math.BigDecimal.movePointRight(int)");
        methods.add("java.math.BigDecimal.divideAndRemainder(BigDecimal, MathContext)");
        methods.add("java.math.BigDecimal.scale()");
        methods.add("java.math.BigDecimal.toString()");
        methods.add("java.math.BigDecimal.precision()");
        methods.add("java.math.BigDecimal.compareTo(BigDecimal)");
        methods.add("java.math.BigDecimal.signum()");
        methods.add("java.math.BigDecimal.remainder(BigDecimal)");
        methods.add("java.math.BigDecimal.byteValueExact()");
        methods.add("java.math.BigDecimal.divideToIntegralValue(BigDecimal, MathContext)");
        methods.add("java.math.BigDecimal.abs(MathContext)");
        methods.add("java.math.BigDecimal.unscaledValue()");
        methods.add("java.math.BigDecimal.shortValueExact()");
        methods.add("java.math.BigDecimal.valueOf(long)");
        methods.add("java.math.BigDecimal.toBigInteger()");
        methods.add("java.math.BigDecimal.toBigIntegerExact()");
        methods.add("java.math.BigDecimal.divide(BigDecimal, int)");
        methods.add("java.math.BigDecimal.hashCode()");
        methods.add("java.math.BigDecimal.multiply(BigDecimal, MathContext)");
        methods.add("java.math.BigDecimal.divideAndRemainder(BigDecimal)");
        methods.add("java.math.BigDecimal.movePointLeft(int)");
        methods.add("java.math.BigDecimal.toPlainString()");
        methods.add("java.math.BigDecimal.floatValue()");
        methods.add("java.math.BigDecimal.ulp()");
        methods.add("java.math.BigDecimal.toEngineeringString()");
        methods.add("java.math.BigDecimal.plus(MathContext)");
        methods.add("java.math.BigDecimal.longValueExact()");
        methods.add("java.math.BigDecimal.doubleValue()");
        methods.add("java.math.BigDecimal.equals(Object)");
        methods.add("java.math.BigDecimal.divide(BigDecimal, int, int)");
        methods.add("java.math.BigDecimal.multiply(BigDecimal)");

        // Type java.math.BigInteger
        honoraries.put("java.math.BigInteger", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless", "org.joe_e.Selfless"});
        fields.add("java.math.BigInteger.ONE");
        fields.add("java.math.BigInteger.TEN");
        fields.add("java.math.BigInteger.ZERO");
        constructors.add("java.math.BigInteger(String, int)");
        constructors.add("java.math.BigInteger(int, byte[])");
        constructors.add("java.math.BigInteger(byte[])");
        constructors.add("java.math.BigInteger(int, int, Random)");
        constructors.add("java.math.BigInteger(String)");
        constructors.add("java.math.BigInteger(int, Random)");
        methods.add("java.math.BigInteger.min(BigInteger)");
        methods.add("java.math.BigInteger.clearBit(int)");
        methods.add("java.math.BigInteger.testBit(int)");
        methods.add("java.math.BigInteger.equals(Object)");
        methods.add("java.math.BigInteger.multiply(BigInteger)");
        methods.add("java.math.BigInteger.and(BigInteger)");
        methods.add("java.math.BigInteger.hashCode()");
        methods.add("java.math.BigInteger.xor(BigInteger)");
        methods.add("java.math.BigInteger.add(BigInteger)");
        methods.add("java.math.BigInteger.intValue()");
        methods.add("java.math.BigInteger.not()");
        methods.add("java.math.BigInteger.mod(BigInteger)");
        methods.add("java.math.BigInteger.pow(int)");
        methods.add("java.math.BigInteger.divide(BigInteger)");
        methods.add("java.math.BigInteger.doubleValue()");
        methods.add("java.math.BigInteger.floatValue()");
        methods.add("java.math.BigInteger.max(BigInteger)");
        methods.add("java.math.BigInteger.getLowestSetBit()");
        methods.add("java.math.BigInteger.divideAndRemainder(BigInteger)");
        methods.add("java.math.BigInteger.flipBit(int)");
        methods.add("java.math.BigInteger.compareTo(BigInteger)");
        methods.add("java.math.BigInteger.toByteArray()");
        methods.add("java.math.BigInteger.subtract(BigInteger)");
        methods.add("java.math.BigInteger.probablePrime(int, Random)");
        methods.add("java.math.BigInteger.shiftRight(int)");
        methods.add("java.math.BigInteger.andNot(BigInteger)");
        methods.add("java.math.BigInteger.longValue()");
        methods.add("java.math.BigInteger.modInverse(BigInteger)");
        methods.add("java.math.BigInteger.bitCount()");
        methods.add("java.math.BigInteger.gcd(BigInteger)");
        methods.add("java.math.BigInteger.signum()");
        methods.add("java.math.BigInteger.bitLength()");
        methods.add("java.math.BigInteger.or(BigInteger)");
        methods.add("java.math.BigInteger.toString()");
        methods.add("java.math.BigInteger.setBit(int)");
        methods.add("java.math.BigInteger.negate()");
        methods.add("java.math.BigInteger.shiftLeft(int)");
        methods.add("java.math.BigInteger.valueOf(long)");
        methods.add("java.math.BigInteger.remainder(BigInteger)");
        methods.add("java.math.BigInteger.toString(int)");
        methods.add("java.math.BigInteger.modPow(BigInteger, BigInteger)");
        methods.add("java.math.BigInteger.abs()");

        // Type java.math.MathContext
        honoraries.put("java.math.MathContext", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless", "org.joe_e.Selfless"});
        fields.add("java.math.MathContext.DECIMAL32");
        fields.add("java.math.MathContext.DECIMAL128");
        fields.add("java.math.MathContext.DECIMAL64");
        fields.add("java.math.MathContext.UNLIMITED");
        constructors.add("java.math.MathContext(int, RoundingMode)");
        constructors.add("java.math.MathContext(String)");
        constructors.add("java.math.MathContext(int)");
        methods.add("java.math.MathContext.equals(Object)");
        methods.add("java.math.MathContext.toString()");
        methods.add("java.math.MathContext.hashCode()");
        methods.add("java.math.MathContext.getPrecision()");
        methods.add("java.math.MathContext.getRoundingMode()");

        // Type java.math.RoundingMode
        honoraries.put("java.math.RoundingMode", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless", "org.joe_e.Equatable"});
        fields.add("java.math.RoundingMode.UNNECESSARY");
        fields.add("java.math.RoundingMode.DOWN");
        fields.add("java.math.RoundingMode.CEILING");
        fields.add("java.math.RoundingMode.HALF_EVEN");
        fields.add("java.math.RoundingMode.FLOOR");
        fields.add("java.math.RoundingMode.HALF_UP");
        fields.add("java.math.RoundingMode.HALF_DOWN");
        fields.add("java.math.RoundingMode.UP");
        methods.add("java.math.RoundingMode.valueOf(int)");
        methods.add("java.math.RoundingMode.values()");
        methods.add("java.math.RoundingMode.valueOf(String)");

        // Type java.security.AccessControlContext

        // Type java.security.AccessControlException

        // Type java.security.AccessController

        // Type java.security.AlgorithmParameterGenerator

        // Type java.security.AlgorithmParameterGeneratorSpi

        // Type java.security.AlgorithmParameters

        // Type java.security.AlgorithmParametersSpi

        // Type java.security.AllPermission

        // Type java.security.AuthProvider

        // Type java.security.BasicPermission

        // Type java.security.Certificate

        // Type java.security.CodeSigner

        // Type java.security.CodeSource

        // Type java.security.DigestException

        // Type java.security.DigestInputStream

        // Type java.security.DigestOutputStream

        // Type java.security.DomainCombiner

        // Type java.security.GeneralSecurityException

        // Type java.security.Guard

        // Type java.security.GuardedObject

        // Type java.security.Identity

        // Type java.security.IdentityScope

        // Type java.security.InvalidAlgorithmParameterException

        // Type java.security.InvalidKeyException

        // Type java.security.InvalidParameterException

        // Type java.security.Key

        // Type java.security.KeyException

        // Type java.security.KeyFactory

        // Type java.security.KeyFactorySpi

        // Type java.security.KeyManagementException

        // Type java.security.KeyPair

        // Type java.security.KeyPairGenerator

        // Type java.security.KeyPairGeneratorSpi

        // Type java.security.KeyRep

        // Type java.security.KeyRep$Type

        // Type java.security.KeyStore

        // Type java.security.KeyStore$Builder

        // Type java.security.KeyStore$CallbackHandlerProtection

        // Type java.security.KeyStore$Entry

        // Type java.security.KeyStore$LoadStoreParameter

        // Type java.security.KeyStore$PasswordProtection

        // Type java.security.KeyStore$PrivateKeyEntry

        // Type java.security.KeyStore$ProtectionParameter

        // Type java.security.KeyStore$SecretKeyEntry

        // Type java.security.KeyStore$TrustedCertificateEntry

        // Type java.security.KeyStoreException

        // Type java.security.KeyStoreSpi

        // Type java.security.MessageDigest
        methods.add("java.security.MessageDigest.digest()");
        methods.add("java.security.MessageDigest.update(byte[])");

        // Type java.security.MessageDigestSpi

        // Type java.security.NoSuchAlgorithmException

        // Type java.security.NoSuchProviderException

        // Type java.security.Permission

        // Type java.security.PermissionCollection

        // Type java.security.Permissions

        // Type java.security.Policy

        // Type java.security.Principal

        // Type java.security.PrivateKey

        // Type java.security.PrivilegedAction

        // Type java.security.PrivilegedActionException

        // Type java.security.PrivilegedExceptionAction

        // Type java.security.ProtectionDomain

        // Type java.security.Provider

        // Type java.security.Provider$Service

        // Type java.security.ProviderException

        // Type java.security.PublicKey

        // Type java.security.SecureClassLoader

        // Type java.security.SecureRandom

        // Type java.security.SecureRandomSpi

        // Type java.security.Security

        // Type java.security.SecurityPermission

        // Type java.security.Signature

        // Type java.security.SignatureException

        // Type java.security.SignatureSpi

        // Type java.security.SignedObject

        // Type java.security.Signer

        // Type java.security.Timestamp

        // Type java.security.UnrecoverableEntryException

        // Type java.security.UnrecoverableKeyException

        // Type java.security.UnresolvedPermission

        // Type java.util.AbstractCollection

        // Type java.util.AbstractList

        // Type java.util.AbstractMap

        // Type java.util.AbstractQueue

        // Type java.util.AbstractSequentialList

        // Type java.util.AbstractSet

        // Type java.util.ArrayList

        // Type java.util.Arrays

        // Type java.util.BitSet

        // Type java.util.Calendar

        // Type java.util.Collection

        // Type java.util.Collections

        // Type java.util.Comparator

        // Type java.util.ConcurrentModificationException

        // Type java.util.Currency

        // Type java.util.Date

        // Type java.util.Dictionary

        // Type java.util.DuplicateFormatFlagsException

        // Type java.util.EmptyStackException

        // Type java.util.EnumMap

        // Type java.util.EnumSet

        // Type java.util.Enumeration

        // Type java.util.EventListener

        // Type java.util.EventListenerProxy

        // Type java.util.EventObject

        // Type java.util.FormatFlagsConversionMismatchException

        // Type java.util.Formattable

        // Type java.util.FormattableFlags

        // Type java.util.Formatter

        // Type java.util.Formatter$BigDecimalLayoutForm

        // Type java.util.FormatterClosedException

        // Type java.util.GregorianCalendar

        // Type java.util.HashMap

        // Type java.util.HashSet

        // Type java.util.Hashtable
        methods.add("java.util.Hashtable.put(K, V)");

        // Type java.util.IdentityHashMap

        // Type java.util.IllegalFormatCodePointException

        // Type java.util.IllegalFormatConversionException

        // Type java.util.IllegalFormatException

        // Type java.util.IllegalFormatFlagsException

        // Type java.util.IllegalFormatPrecisionException

        // Type java.util.IllegalFormatWidthException

        // Type java.util.InputMismatchException

        // Type java.util.InvalidPropertiesFormatException

        // Type java.util.Iterator
        methods.add("java.util.Iterator.hasNext()");
        methods.add("java.util.Iterator.next()");

        // Type java.util.LinkedHashMap

        // Type java.util.LinkedHashSet

        // Type java.util.LinkedList

        // Type java.util.List

        // Type java.util.ListIterator

        // Type java.util.ListResourceBundle

        // Type java.util.Locale

        // Type java.util.Map

        // Type java.util.Map$Entry

        // Type java.util.MissingFormatArgumentException

        // Type java.util.MissingFormatWidthException

        // Type java.util.MissingResourceException

        // Type java.util.NoSuchElementException
        honoraries.put("java.util.NoSuchElementException", new String[]{"org.joe_e.Immutable", "org.joe_e.Powerless"});
        constructors.add("java.util.NoSuchElementException(String)");
        constructors.add("java.util.NoSuchElementException()");

        // Type java.util.Observable

        // Type java.util.Observer

        // Type java.util.PriorityQueue

        // Type java.util.Properties

        // Type java.util.PropertyPermission

        // Type java.util.PropertyResourceBundle

        // Type java.util.Queue

        // Type java.util.Random

        // Type java.util.RandomAccess

        // Type java.util.ResourceBundle

        // Type java.util.Scanner

        // Type java.util.Set

        // Type java.util.SimpleTimeZone

        // Type java.util.SortedMap

        // Type java.util.SortedSet

        // Type java.util.Stack

        // Type java.util.StringTokenizer

        // Type java.util.TimeZone

        // Type java.util.Timer

        // Type java.util.TimerTask

        // Type java.util.TooManyListenersException

        // Type java.util.TreeMap

        // Type java.util.TreeSet

        // Type java.util.UUID

        // Type java.util.UnknownFormatConversionException

        // Type java.util.UnknownFormatFlagsException

        // Type java.util.Vector

        // Type java.util.WeakHashMap

        // Type java.util.logging.ConsoleHandler

        // Type java.util.logging.ErrorManager

        // Type java.util.logging.FileHandler

        // Type java.util.logging.Filter

        // Type java.util.logging.Formatter

        // Type java.util.logging.Handler

        // Type java.util.logging.Level

        // Type java.util.logging.LogManager

        // Type java.util.logging.LogRecord

        // Type java.util.logging.Logger
        methods.add("java.util.logging.Logger.fine(String)");
        methods.add("java.util.logging.Logger.throwing(String, String, Throwable)");
        methods.add("java.util.logging.Logger.severe(String)");
        methods.add("java.util.logging.Logger.finer(String)");
        methods.add("java.util.logging.Logger.finest(String)");
        methods.add("java.util.logging.Logger.warning(String)");

        // Type java.util.logging.LoggingMXBean

        // Type java.util.logging.LoggingPermission

        // Type java.util.logging.MemoryHandler

        // Type java.util.logging.SimpleFormatter

        // Type java.util.logging.SocketHandler

        // Type java.util.logging.StreamHandler

        // Type java.util.logging.XMLFormatter

        // Type javax.mail.Address

        // Type javax.mail.AuthenticationFailedException

        // Type javax.mail.Authenticator

        // Type javax.mail.BodyPart

        // Type javax.mail.FetchProfile

        // Type javax.mail.FetchProfile$Item

        // Type javax.mail.Flags

        // Type javax.mail.Flags$Flag

        // Type javax.mail.Folder

        // Type javax.mail.FolderClosedException

        // Type javax.mail.FolderNotFoundException

        // Type javax.mail.Header

        // Type javax.mail.IllegalWriteException

        // Type javax.mail.Message

        // Type javax.mail.Message$RecipientType

        // Type javax.mail.MessageAware

        // Type javax.mail.MessageContext

        // Type javax.mail.MessageRemovedException

        // Type javax.mail.MessagingException

        // Type javax.mail.MethodNotSupportedException

        // Type javax.mail.Multipart

        // Type javax.mail.MultipartDataSource

        // Type javax.mail.NoSuchProviderException

        // Type javax.mail.Part

        // Type javax.mail.PasswordAuthentication

        // Type javax.mail.Provider

        // Type javax.mail.Provider$Type

        // Type javax.mail.Quota

        // Type javax.mail.Quota$Resource

        // Type javax.mail.QuotaAwareStore

        // Type javax.mail.ReadOnlyFolderException

        // Type javax.mail.SendFailedException

        // Type javax.mail.Service

        // Type javax.mail.Session

        // Type javax.mail.Store

        // Type javax.mail.StoreClosedException

        // Type javax.mail.Transport

        // Type javax.mail.UIDFolder

        // Type javax.mail.UIDFolder$FetchProfileItem

        // Type javax.mail.URLName

        // Type javax.mail.internet.AddressException

        // Type javax.mail.internet.ContentDisposition

        // Type javax.mail.internet.ContentType

        // Type javax.mail.internet.HeaderTokenizer

        // Type javax.mail.internet.HeaderTokenizer$Token

        // Type javax.mail.internet.InternetAddress

        // Type javax.mail.internet.InternetHeaders

        // Type javax.mail.internet.InternetHeaders$InternetHeader

        // Type javax.mail.internet.MailDateFormat

        // Type javax.mail.internet.MimeBodyPart

        // Type javax.mail.internet.MimeMessage

        // Type javax.mail.internet.MimeMessage$RecipientType

        // Type javax.mail.internet.MimeMultipart

        // Type javax.mail.internet.MimePart

        // Type javax.mail.internet.MimePartDataSource

        // Type javax.mail.internet.MimeUtility

        // Type javax.mail.internet.NewsAddress

        // Type javax.mail.internet.ParameterList

        // Type javax.mail.internet.ParseException

        // Type javax.mail.internet.PreencodedMimeBodyPart

        // Type javax.mail.internet.SharedInputStream

        // Type javax.servlet.Filter

        // Type javax.servlet.FilterChain

        // Type javax.servlet.FilterConfig

        // Type javax.servlet.GenericServlet

        // Type javax.servlet.RequestDispatcher

        // Type javax.servlet.Servlet

        // Type javax.servlet.ServletConfig

        // Type javax.servlet.ServletContext

        // Type javax.servlet.ServletContextAttributeEvent

        // Type javax.servlet.ServletContextAttributeListener

        // Type javax.servlet.ServletContextEvent

        // Type javax.servlet.ServletContextListener

        // Type javax.servlet.ServletException

        // Type javax.servlet.ServletInputStream

        // Type javax.servlet.ServletOutputStream

        // Type javax.servlet.ServletRequest
        methods.add("javax.servlet.ServletRequest.getParameter(String)");

        // Type javax.servlet.ServletRequestAttributeEvent

        // Type javax.servlet.ServletRequestAttributeListener

        // Type javax.servlet.ServletRequestEvent

        // Type javax.servlet.ServletRequestListener

        // Type javax.servlet.ServletRequestWrapper

        // Type javax.servlet.ServletResponse
        methods.add("javax.servlet.ServletResponse.getWriter()");

        // Type javax.servlet.ServletResponseWrapper

        // Type javax.servlet.SingleThreadModel

        // Type javax.servlet.UnavailableException

        // Type javax.servlet.http.Cookie

        // Type javax.servlet.http.HttpServlet

        // Type javax.servlet.http.HttpServletRequest

        // Type javax.servlet.http.HttpServletRequestWrapper

        // Type javax.servlet.http.HttpServletResponse
        methods.add("javax.servlet.http.HttpServletResponse.sendRedirect(String)");

        // Type javax.servlet.http.HttpServletResponseWrapper

        // Type javax.servlet.http.HttpSession

        // Type javax.servlet.http.HttpSessionActivationListener

        // Type javax.servlet.http.HttpSessionAttributeListener

        // Type javax.servlet.http.HttpSessionBindingEvent

        // Type javax.servlet.http.HttpSessionBindingListener

        // Type javax.servlet.http.HttpSessionContext

        // Type javax.servlet.http.HttpSessionEvent

        // Type javax.servlet.http.HttpSessionListener

        // Type javax.servlet.http.HttpUtils

        // Type org.joe_e.Equatable

        // Type org.joe_e.ErrorHandler
        methods.add("org.joe_e.ErrorHandler.handle(Error)");

        // Type org.joe_e.Immutable

        // Type org.joe_e.IsJoeE

        // Type org.joe_e.JoeE
        methods.add("org.joe_e.JoeE.instanceOf(Object, Class<?>)");
        methods.add("org.joe_e.JoeE.isSubtypeOf(Class<?>, Class<?>)");
        methods.add("org.joe_e.JoeE.abort(Error)");

        // Type org.joe_e.Powerless

        // Type org.joe_e.Selfless
        methods.add("org.joe_e.Selfless.hashCode()");

        // Type org.joe_e.Struct
        constructors.add("org.joe_e.Struct()");
        methods.add("org.joe_e.Struct.hashCode()");
        methods.add("org.joe_e.Struct.equals(Object)");

        // Type org.joe_e.Token
        constructors.add("org.joe_e.Token()");

        // Type org.joe_e.array.ArrayBuilder
        methods.add("org.joe_e.array.ArrayBuilder.append(E[], int, int)");
        methods.add("org.joe_e.array.ArrayBuilder.append(E)");
        methods.add("org.joe_e.array.ArrayBuilder.length()");
        methods.add("org.joe_e.array.ArrayBuilder.append(E[])");
        methods.add("org.joe_e.array.ArrayBuilder.snapshot()");

        // Type org.joe_e.array.BooleanArray
        methods.add("org.joe_e.array.BooleanArray.equals(Object)");
        methods.add("org.joe_e.array.BooleanArray.toArray(T[])");
        methods.add("org.joe_e.array.BooleanArray.length()");
        methods.add("org.joe_e.array.BooleanArray.with(boolean)");
        methods.add("org.joe_e.array.BooleanArray.with(Boolean)");
        methods.add("org.joe_e.array.BooleanArray.toString()");
        methods.add("org.joe_e.array.BooleanArray.array(boolean[])");
        methods.add("org.joe_e.array.BooleanArray.builder(int)");
        methods.add("org.joe_e.array.BooleanArray.hashCode()");
        methods.add("org.joe_e.array.BooleanArray.without(int)");
        methods.add("org.joe_e.array.BooleanArray.builder()");
        methods.add("org.joe_e.array.BooleanArray.toBooleanArray()");
        methods.add("org.joe_e.array.BooleanArray.get(int)");
        methods.add("org.joe_e.array.BooleanArray.getBoolean(int)");

        // Type org.joe_e.array.BooleanArray$Builder
        methods.add("org.joe_e.array.BooleanArray$Builder.append(boolean[], int, int)");
        methods.add("org.joe_e.array.BooleanArray$Builder.append(Boolean)");
        methods.add("org.joe_e.array.BooleanArray$Builder.append(Boolean[])");
        methods.add("org.joe_e.array.BooleanArray$Builder.append(boolean)");
        methods.add("org.joe_e.array.BooleanArray$Builder.append(boolean[])");
        methods.add("org.joe_e.array.BooleanArray$Builder.snapshot()");
        methods.add("org.joe_e.array.BooleanArray$Builder.append(Boolean[], int, int)");

        // Type org.joe_e.array.ByteArray
        methods.add("org.joe_e.array.ByteArray.with(byte)");
        methods.add("org.joe_e.array.ByteArray.builder()");
        methods.add("org.joe_e.array.ByteArray.asInputStream()");
        methods.add("org.joe_e.array.ByteArray.toByteArray()");
        methods.add("org.joe_e.array.ByteArray.toString()");
        methods.add("org.joe_e.array.ByteArray.with(Byte)");
        methods.add("org.joe_e.array.ByteArray.array(byte[])");
        methods.add("org.joe_e.array.ByteArray.hashCode()");
        methods.add("org.joe_e.array.ByteArray.equals(Object)");
        methods.add("org.joe_e.array.ByteArray.getByte(int)");
        methods.add("org.joe_e.array.ByteArray.builder(int)");
        methods.add("org.joe_e.array.ByteArray.length()");
        methods.add("org.joe_e.array.ByteArray.without(int)");
        methods.add("org.joe_e.array.ByteArray.get(int)");
        methods.add("org.joe_e.array.ByteArray.toArray(T[])");

        // Type org.joe_e.array.ByteArray$Builder
        methods.add("org.joe_e.array.ByteArray$Builder.append(Byte[])");
        methods.add("org.joe_e.array.ByteArray$Builder.snapshot()");
        methods.add("org.joe_e.array.ByteArray$Builder.append(byte[])");
        methods.add("org.joe_e.array.ByteArray$Builder.asOutputStream()");
        methods.add("org.joe_e.array.ByteArray$Builder.append(Byte[], int, int)");
        methods.add("org.joe_e.array.ByteArray$Builder.append(byte[], int, int)");
        methods.add("org.joe_e.array.ByteArray$Builder.append(Byte)");
        methods.add("org.joe_e.array.ByteArray$Builder.append(byte)");

        // Type org.joe_e.array.ByteArray$BuilderOutputStream
        constructors.add("org.joe_e.array.ByteArray$BuilderOutputStream(Builder)");
        constructors.add("org.joe_e.array.ByteArray$BuilderOutputStream()");
        constructors.add("org.joe_e.array.ByteArray$BuilderOutputStream(int)");
        methods.add("org.joe_e.array.ByteArray$BuilderOutputStream.write(int)");
        methods.add("org.joe_e.array.ByteArray$BuilderOutputStream.write(byte[], int, int)");
        methods.add("org.joe_e.array.ByteArray$BuilderOutputStream.write(byte[])");
        methods.add("org.joe_e.array.ByteArray$BuilderOutputStream.snapshot()");
        methods.add("org.joe_e.array.ByteArray$BuilderOutputStream.length()");

        // Type org.joe_e.array.CharArray
        methods.add("org.joe_e.array.CharArray.equals(Object)");
        methods.add("org.joe_e.array.CharArray.with(char)");
        methods.add("org.joe_e.array.CharArray.without(int)");
        methods.add("org.joe_e.array.CharArray.length()");
        methods.add("org.joe_e.array.CharArray.with(Character)");
        methods.add("org.joe_e.array.CharArray.hashCode()");
        methods.add("org.joe_e.array.CharArray.get(int)");
        methods.add("org.joe_e.array.CharArray.toCharArray()");
        methods.add("org.joe_e.array.CharArray.toArray(T[])");
        methods.add("org.joe_e.array.CharArray.array(char[])");
        methods.add("org.joe_e.array.CharArray.builder()");
        methods.add("org.joe_e.array.CharArray.builder(int)");
        methods.add("org.joe_e.array.CharArray.getChar(int)");
        methods.add("org.joe_e.array.CharArray.toString()");

        // Type org.joe_e.array.CharArray$Builder
        methods.add("org.joe_e.array.CharArray$Builder.append(Character[])");
        methods.add("org.joe_e.array.CharArray$Builder.append(char[])");
        methods.add("org.joe_e.array.CharArray$Builder.append(Character[], int, int)");
        methods.add("org.joe_e.array.CharArray$Builder.append(Character)");
        methods.add("org.joe_e.array.CharArray$Builder.append(char[], int, int)");
        methods.add("org.joe_e.array.CharArray$Builder.append(char)");
        methods.add("org.joe_e.array.CharArray$Builder.snapshot()");

        // Type org.joe_e.array.ConstArray
        methods.add("org.joe_e.array.ConstArray.iterator()");
        methods.add("org.joe_e.array.ConstArray.builder(int)");
        methods.add("org.joe_e.array.ConstArray.hashCode()");
        methods.add("org.joe_e.array.ConstArray.get(int)");
        methods.add("org.joe_e.array.ConstArray.equals(Object)");
        methods.add("org.joe_e.array.ConstArray.toArray(T[])");
        methods.add("org.joe_e.array.ConstArray.builder()");
        methods.add("org.joe_e.array.ConstArray.without(int)");
        methods.add("org.joe_e.array.ConstArray.toString()");
        methods.add("org.joe_e.array.ConstArray.length()");
        methods.add("org.joe_e.array.ConstArray.with(E)");
        methods.add("org.joe_e.array.ConstArray.array(T[])");

        // Type org.joe_e.array.ConstArray$Builder
        methods.add("org.joe_e.array.ConstArray$Builder.length()");
        methods.add("org.joe_e.array.ConstArray$Builder.append(E[])");
        methods.add("org.joe_e.array.ConstArray$Builder.snapshot()");
        methods.add("org.joe_e.array.ConstArray$Builder.append(E)");
        methods.add("org.joe_e.array.ConstArray$Builder.append(E[], int, int)");

        // Type org.joe_e.array.DoubleArray
        methods.add("org.joe_e.array.DoubleArray.builder()");
        methods.add("org.joe_e.array.DoubleArray.get(int)");
        methods.add("org.joe_e.array.DoubleArray.length()");
        methods.add("org.joe_e.array.DoubleArray.getDouble(int)");
        methods.add("org.joe_e.array.DoubleArray.toString()");
        methods.add("org.joe_e.array.DoubleArray.toArray(T[])");
        methods.add("org.joe_e.array.DoubleArray.builder(int)");
        methods.add("org.joe_e.array.DoubleArray.hashCode()");
        methods.add("org.joe_e.array.DoubleArray.with(double)");
        methods.add("org.joe_e.array.DoubleArray.with(Double)");
        methods.add("org.joe_e.array.DoubleArray.array(double[])");
        methods.add("org.joe_e.array.DoubleArray.toDoubleArray()");
        methods.add("org.joe_e.array.DoubleArray.without(int)");
        methods.add("org.joe_e.array.DoubleArray.equals(Object)");

        // Type org.joe_e.array.DoubleArray$Builder
        methods.add("org.joe_e.array.DoubleArray$Builder.snapshot()");
        methods.add("org.joe_e.array.DoubleArray$Builder.append(double[])");
        methods.add("org.joe_e.array.DoubleArray$Builder.append(Double[], int, int)");
        methods.add("org.joe_e.array.DoubleArray$Builder.append(Double[])");
        methods.add("org.joe_e.array.DoubleArray$Builder.append(double)");
        methods.add("org.joe_e.array.DoubleArray$Builder.append(double[], int, int)");
        methods.add("org.joe_e.array.DoubleArray$Builder.append(Double)");

        // Type org.joe_e.array.FloatArray
        methods.add("org.joe_e.array.FloatArray.array(float[])");
        methods.add("org.joe_e.array.FloatArray.equals(Object)");
        methods.add("org.joe_e.array.FloatArray.toFloatArray()");
        methods.add("org.joe_e.array.FloatArray.builder(int)");
        methods.add("org.joe_e.array.FloatArray.length()");
        methods.add("org.joe_e.array.FloatArray.with(float)");
        methods.add("org.joe_e.array.FloatArray.with(Float)");
        methods.add("org.joe_e.array.FloatArray.toString()");
        methods.add("org.joe_e.array.FloatArray.without(int)");
        methods.add("org.joe_e.array.FloatArray.getFloat(int)");
        methods.add("org.joe_e.array.FloatArray.get(int)");
        methods.add("org.joe_e.array.FloatArray.builder()");
        methods.add("org.joe_e.array.FloatArray.hashCode()");
        methods.add("org.joe_e.array.FloatArray.toArray(T[])");

        // Type org.joe_e.array.FloatArray$Builder
        methods.add("org.joe_e.array.FloatArray$Builder.append(float[])");
        methods.add("org.joe_e.array.FloatArray$Builder.append(float)");
        methods.add("org.joe_e.array.FloatArray$Builder.append(Float[])");
        methods.add("org.joe_e.array.FloatArray$Builder.append(float[], int, int)");
        methods.add("org.joe_e.array.FloatArray$Builder.append(Float[], int, int)");
        methods.add("org.joe_e.array.FloatArray$Builder.append(Float)");
        methods.add("org.joe_e.array.FloatArray$Builder.snapshot()");

        // Type org.joe_e.array.ImmutableArray
        methods.add("org.joe_e.array.ImmutableArray.builder()");
        methods.add("org.joe_e.array.ImmutableArray.without(int)");
        methods.add("org.joe_e.array.ImmutableArray.with(E)");
        methods.add("org.joe_e.array.ImmutableArray.builder(int)");
        methods.add("org.joe_e.array.ImmutableArray.array(E[])");

        // Type org.joe_e.array.ImmutableArray$Builder
        methods.add("org.joe_e.array.ImmutableArray$Builder.append(E[], int, int)");
        methods.add("org.joe_e.array.ImmutableArray$Builder.append(E)");
        methods.add("org.joe_e.array.ImmutableArray$Builder.snapshot()");
        methods.add("org.joe_e.array.ImmutableArray$Builder.append(E[])");

        // Type org.joe_e.array.IntArray
        methods.add("org.joe_e.array.IntArray.equals(Object)");
        methods.add("org.joe_e.array.IntArray.get(int)");
        methods.add("org.joe_e.array.IntArray.hashCode()");
        methods.add("org.joe_e.array.IntArray.length()");
        methods.add("org.joe_e.array.IntArray.with(Integer)");
        methods.add("org.joe_e.array.IntArray.getInt(int)");
        methods.add("org.joe_e.array.IntArray.toArray(T[])");
        methods.add("org.joe_e.array.IntArray.array(int[])");
        methods.add("org.joe_e.array.IntArray.builder()");
        methods.add("org.joe_e.array.IntArray.toString()");
        methods.add("org.joe_e.array.IntArray.with(int)");
        methods.add("org.joe_e.array.IntArray.builder(int)");
        methods.add("org.joe_e.array.IntArray.without(int)");
        methods.add("org.joe_e.array.IntArray.toIntArray()");

        // Type org.joe_e.array.IntArray$Builder
        methods.add("org.joe_e.array.IntArray$Builder.append(Integer)");
        methods.add("org.joe_e.array.IntArray$Builder.append(int[], int, int)");
        methods.add("org.joe_e.array.IntArray$Builder.snapshot()");
        methods.add("org.joe_e.array.IntArray$Builder.append(int)");
        methods.add("org.joe_e.array.IntArray$Builder.append(Integer[], int, int)");
        methods.add("org.joe_e.array.IntArray$Builder.append(int[])");
        methods.add("org.joe_e.array.IntArray$Builder.append(Integer[])");

        // Type org.joe_e.array.LongArray
        methods.add("org.joe_e.array.LongArray.with(long)");
        methods.add("org.joe_e.array.LongArray.toString()");
        methods.add("org.joe_e.array.LongArray.toLongArray()");
        methods.add("org.joe_e.array.LongArray.hashCode()");
        methods.add("org.joe_e.array.LongArray.getLong(int)");
        methods.add("org.joe_e.array.LongArray.with(Long)");
        methods.add("org.joe_e.array.LongArray.toArray(T[])");
        methods.add("org.joe_e.array.LongArray.array(long[])");
        methods.add("org.joe_e.array.LongArray.get(int)");
        methods.add("org.joe_e.array.LongArray.length()");
        methods.add("org.joe_e.array.LongArray.builder()");
        methods.add("org.joe_e.array.LongArray.builder(int)");
        methods.add("org.joe_e.array.LongArray.without(int)");
        methods.add("org.joe_e.array.LongArray.equals(Object)");

        // Type org.joe_e.array.LongArray$Builder
        methods.add("org.joe_e.array.LongArray$Builder.append(long)");
        methods.add("org.joe_e.array.LongArray$Builder.append(Long)");
        methods.add("org.joe_e.array.LongArray$Builder.append(Long[])");
        methods.add("org.joe_e.array.LongArray$Builder.snapshot()");
        methods.add("org.joe_e.array.LongArray$Builder.append(long[])");
        methods.add("org.joe_e.array.LongArray$Builder.append(Long[], int, int)");
        methods.add("org.joe_e.array.LongArray$Builder.append(long[], int, int)");

        // Type org.joe_e.array.PowerlessArray
        methods.add("org.joe_e.array.PowerlessArray.with(E)");
        methods.add("org.joe_e.array.PowerlessArray.without(int)");
        methods.add("org.joe_e.array.PowerlessArray.builder(int)");
        methods.add("org.joe_e.array.PowerlessArray.builder()");
        methods.add("org.joe_e.array.PowerlessArray.array(E[])");

        // Type org.joe_e.array.PowerlessArray$Builder
        methods.add("org.joe_e.array.PowerlessArray$Builder.append(E[])");
        methods.add("org.joe_e.array.PowerlessArray$Builder.append(E[], int, int)");
        methods.add("org.joe_e.array.PowerlessArray$Builder.snapshot()");
        methods.add("org.joe_e.array.PowerlessArray$Builder.append(E)");

        // Type org.joe_e.array.ShortArray
        methods.add("org.joe_e.array.ShortArray.with(short)");
        methods.add("org.joe_e.array.ShortArray.with(Short)");
        methods.add("org.joe_e.array.ShortArray.length()");
        methods.add("org.joe_e.array.ShortArray.hashCode()");
        methods.add("org.joe_e.array.ShortArray.equals(Object)");
        methods.add("org.joe_e.array.ShortArray.get(int)");
        methods.add("org.joe_e.array.ShortArray.array(short[])");
        methods.add("org.joe_e.array.ShortArray.builder()");
        methods.add("org.joe_e.array.ShortArray.getShort(int)");
        methods.add("org.joe_e.array.ShortArray.toShortArray()");
        methods.add("org.joe_e.array.ShortArray.toString()");
        methods.add("org.joe_e.array.ShortArray.builder(int)");
        methods.add("org.joe_e.array.ShortArray.toArray(T[])");
        methods.add("org.joe_e.array.ShortArray.without(int)");

        // Type org.joe_e.array.ShortArray$Builder
        methods.add("org.joe_e.array.ShortArray$Builder.append(short)");
        methods.add("org.joe_e.array.ShortArray$Builder.snapshot()");
        methods.add("org.joe_e.array.ShortArray$Builder.append(Short[])");
        methods.add("org.joe_e.array.ShortArray$Builder.append(Short[], int, int)");
        methods.add("org.joe_e.array.ShortArray$Builder.append(Short)");
        methods.add("org.joe_e.array.ShortArray$Builder.append(short[], int, int)");
        methods.add("org.joe_e.array.ShortArray$Builder.append(short[])");

        // Type org.joe_e.charset.ASCII
        methods.add("org.joe_e.charset.ASCII.encode(String)");
        methods.add("org.joe_e.charset.ASCII.output(OutputStream)");
        methods.add("org.joe_e.charset.ASCII.decode(byte[])");
        methods.add("org.joe_e.charset.ASCII.input(InputStream)");
        methods.add("org.joe_e.charset.ASCII.decode(byte[], int, int)");

        // Type org.joe_e.charset.URLEncoding
        methods.add("org.joe_e.charset.URLEncoding.encode(String)");
        methods.add("org.joe_e.charset.URLEncoding.decode(String)");

        // Type org.joe_e.charset.UTF8
        methods.add("org.joe_e.charset.UTF8.decode(byte[])");
        methods.add("org.joe_e.charset.UTF8.encode(String)");
        methods.add("org.joe_e.charset.UTF8.input(InputStream)");
        methods.add("org.joe_e.charset.UTF8.output(OutputStream)");
        methods.add("org.joe_e.charset.UTF8.decode(byte[], int, int)");

        // Type org.joe_e.file.Filesystem
        methods.add("org.joe_e.file.Filesystem.checkName(String)");
        methods.add("org.joe_e.file.Filesystem.length(File)");
        methods.add("org.joe_e.file.Filesystem.file(File, String)");
        methods.add("org.joe_e.file.Filesystem.writeNew(File)");
        methods.add("org.joe_e.file.Filesystem.read(File)");
        methods.add("org.joe_e.file.Filesystem.list(File)");

        // Type org.joe_e.file.InvalidFilenameException
        constructors.add("org.joe_e.file.InvalidFilenameException()");

        // Type org.joe_e.reflect.Proxies
        methods.add("org.joe_e.reflect.Proxies.proxy(InvocationHandler, Class[])");
        methods.add("org.joe_e.reflect.Proxies.isImplementable(Class)");
        methods.add("org.joe_e.reflect.Proxies.getHandler(Proxy)");

        // Type org.joe_e.reflect.Reflection
        methods.add("org.joe_e.reflect.Reflection.constructors(Class)");
        methods.add("org.joe_e.reflect.Reflection.method(Class, String, Class[])");
        methods.add("org.joe_e.reflect.Reflection.invoke(Method, Object, Object[])");
        methods.add("org.joe_e.reflect.Reflection.constructor(Class, Class[])");
        methods.add("org.joe_e.reflect.Reflection.field(Class, String)");
        methods.add("org.joe_e.reflect.Reflection.getName(Class)");
        methods.add("org.joe_e.reflect.Reflection.construct(Constructor, Object[])");
        methods.add("org.joe_e.reflect.Reflection.set(Field, Object, Object)");
        methods.add("org.joe_e.reflect.Reflection.methods(Class)");
        methods.add("org.joe_e.reflect.Reflection.fields(Class)");
        methods.add("org.joe_e.reflect.Reflection.get(Field, Object)");

        // Type org.joe_e.servlet.AbstractSessionView
        constructors.add("org.joe_e.servlet.AbstractSessionView()");

        // Type org.joe_e.servlet.Cloner

        // Type org.joe_e.servlet.Dispatcher
        fields.add("org.joe_e.servlet.Dispatcher.logger");

        // Type org.joe_e.servlet.SessionInitializer

        // Type org.joe_e.servlet.mail.notjoe_e.PostfixClient
        methods.add("org.joe_e.servlet.mail.notjoe_e.PostfixClient.updateDatabase(String)");

        // Type org.joe_e.servlet.readonly

        // Type org.joe_e.taming.Policy
        methods.add("org.joe_e.taming.Policy.fieldEnabled(String)");
        methods.add("org.joe_e.taming.Policy.hasHonorary(String, String)");
        methods.add("org.joe_e.taming.Policy.constructorEnabled(String)");
        methods.add("org.joe_e.taming.Policy.methodEnabled(String)");
    }
}
