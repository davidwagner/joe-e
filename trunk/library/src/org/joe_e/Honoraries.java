package org.joe_e;

import java.util.Map;
import java.util.HashMap;

public class Honoraries {
    static final int IMPL_SELFLESS  = 0x0001;
    static final int IMPL_IMMUTABLE = 0x0002;
    static final int IMPL_POWERLESS = 0x0004; 
    
    // static final int IS_EQUATABLE   = 0x0010;
   
    private static final Map<Class<?>, Integer> entries;

    static {
        entries = new HashMap<Class<?>, Integer>();

        // The following entries will be automatically generated by the taming tool.
        entries.put(String.class, IMPL_SELFLESS | IMPL_IMMUTABLE | IMPL_POWERLESS);
        entries.put(Integer.class, IMPL_SELFLESS | IMPL_IMMUTABLE | IMPL_POWERLESS);
    }
    
    public static boolean honorarilyImplements(Class<?> implementor, Class<?> mi) {
        Integer result = entries.get(implementor);
        if (result == null) {
            return false;
        } else {
            if (mi == Selfless.class) {
                return ((result & IMPL_SELFLESS) != 0);
            } else if (mi == Immutable.class) {
                return ((result & IMPL_IMMUTABLE) != 0);                
            } else if (mi == Powerless.class) {
                return ((result & IMPL_POWERLESS) != 0);
            } else {
                throw new IllegalArgumentException("mi not a marker interface");
            }
        }
    }
}