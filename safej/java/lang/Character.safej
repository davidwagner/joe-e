# Manually audited.  See comment on valueOf
class("java.lang.Character",
  comment("Methods that are dependent on the set of defined Unicode characters (and thus dependent on the set of unicode characters standardized at any given time) have an appropriate comment, and are allowed."),
  honorary("org.joe_e.Powerless", "org.joe_e.Selfless"),
  static(field("COMBINING_SPACING_MARK"),
    field("CONNECTOR_PUNCTUATION"),
    field("CONTROL"),
    field("CURRENCY_SYMBOL"),
    field("DASH_PUNCTUATION"),
    field("DECIMAL_DIGIT_NUMBER"),
    field("DIRECTIONALITY_ARABIC_NUMBER"),
    field("DIRECTIONALITY_BOUNDARY_NEUTRAL"),
    field("DIRECTIONALITY_COMMON_NUMBER_SEPARATOR"),
    field("DIRECTIONALITY_EUROPEAN_NUMBER"),
    field("DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR"),
    field("DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR"),
    field("DIRECTIONALITY_LEFT_TO_RIGHT"),
    field("DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING"),
    field("DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE"),
    field("DIRECTIONALITY_NONSPACING_MARK"),
    field("DIRECTIONALITY_OTHER_NEUTRALS"),
    field("DIRECTIONALITY_PARAGRAPH_SEPARATOR"),
    field("DIRECTIONALITY_POP_DIRECTIONAL_FORMAT"),
    field("DIRECTIONALITY_RIGHT_TO_LEFT"),
    field("DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC"),
    field("DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING"),
    field("DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE"),
    field("DIRECTIONALITY_SEGMENT_SEPARATOR"),
    field("DIRECTIONALITY_UNDEFINED"),
    field("DIRECTIONALITY_WHITESPACE"),
    field("ENCLOSING_MARK"),
    field("END_PUNCTUATION"),
    field("FINAL_QUOTE_PUNCTUATION"),
    field("FORMAT"),
    field("INITIAL_QUOTE_PUNCTUATION"),
    field("LETTER_NUMBER"),
    field("LINE_SEPARATOR"),
    field("LOWERCASE_LETTER"),
    field("MATH_SYMBOL"),
    field("MAX_CODE_POINT"),
    field("MAX_HIGH_SURROGATE"),
    field("MAX_LOW_SURROGATE"),
    field("MAX_RADIX"),
    field("MAX_SURROGATE"),
    field("MAX_VALUE"),
    field("MIN_CODE_POINT"),
    field("MIN_HIGH_SURROGATE"),
    field("MIN_LOW_SURROGATE"),
    field("MIN_RADIX"),
    field("MIN_SUPPLEMENTARY_CODE_POINT"),
    field("MIN_SURROGATE"),
    field("MIN_VALUE"),
    field("MODIFIER_LETTER"),
    field("MODIFIER_SYMBOL"),
    field("NON_SPACING_MARK"),
    field("OTHER_LETTER"),
    field("OTHER_NUMBER"),
    field("OTHER_PUNCTUATION"),
    field("OTHER_SYMBOL"),
    field("PARAGRAPH_SEPARATOR"),
    field("PRIVATE_USE"),
    field("SIZE"),
    field("SPACE_SEPARATOR"),
    field("START_PUNCTUATION"),
    field("SURROGATE"),
    field("TITLECASE_LETTER"),
    field("TYPE"),
    field("UNASSIGNED"),
    field("UPPERCASE_LETTER"),
    constructor("Character(char)"),
    method("charCount(int)"),
    method("codePointAt(CharSequence, int)"),
    method("codePointAt(char[], int)"),
    method("codePointAt(char[], int, int)"),
    method("codePointBefore(CharSequence, int)"),
    method("codePointBefore(char[], int)"),
    method("codePointBefore(char[], int, int)"),
    method("codePointCount(CharSequence, int, int)"),
    method("codePointCount(char[], int, int)"),
    method("digit(char, int)"),
    method("digit(int, int)"),
    method("forDigit(int, int)"),
    method("getDirectionality(char)", comment("Unicode spec")),
    method("getDirectionality(int)", comment("Unicode spec")),
    method("getNumericValue(char)", comment("Unicode spec")),
    method("getNumericValue(int)", comment("Unicode spec")),
    method("getType(char)", comment("Unicode spec")),
    method("getType(int)", comment("Unicode spec")),
    method("isDefined(char)", comment("Unicode spec")),
    method("isDefined(int)", comment("Unicode spec")),
    method("isDigit(char)", comment("Unicode spec")),
    method("isDigit(int)", comment("Unicode spec")),
    method("isHighSurrogate(char)"),
    method("isISOControl(char)"),
    method("isISOControl(int)"),
    method("isIdentifierIgnorable(char)", comment("Unicode spec")),
    method("isIdentifierIgnorable(int)", comment("Unicode spec")),
    method("isJavaIdentifierPart(char)", comment("Unicode spec")),
    method("isJavaIdentifierPart(int)", comment("Unicode spec")),
    method("isJavaIdentifierStart(char)", comment("Unicode spec")),
    method("isJavaIdentifierStart(int)", comment("Unicode spec")),
    method(suppress, "isJavaLetter(char)", comment("deprecated")),
    method(suppress, "isJavaLetterOrDigit(char)", comment("deprecated")),
    method("isLetter(char)", comment("Unicode spec")),
    method("isLetter(int)", comment("Unicode spec")),
    method("isLetterOrDigit(char)", comment("Unicode spec")),
    method("isLetterOrDigit(int)", comment("Unicode spec")),
    method("isLowSurrogate(char)"),
    method("isLowerCase(char)", comment("Unicode spec")),
    method("isLowerCase(int)", comment("Unicode spec")),
    method("isMirrored(char)", comment("Unicode spec")),
    method("isMirrored(int)", comment("Unicode spec")),
    method("isSpace(char)", comment("deprecated but replacement is not equivalent")),
    method("isSpaceChar(char)", comment("Unicode spec")),
    method("isSpaceChar(int)", comment("Unicode spec")),
    method("isSupplementaryCodePoint(int)"),
    method("isSurrogatePair(char, char)"),
    method("isTitleCase(char)", comment("Unicode spec")),
    method("isTitleCase(int)", comment("Unicode spec")),
    method("isUnicodeIdentifierPart(char)", comment("Unicode spec")),
    method("isUnicodeIdentifierPart(int)", comment("Unicode spec")),
    method("isUnicodeIdentifierStart(char)", comment("Unicode spec")),
    method("isUnicodeIdentifierStart(int)", comment("Unicode spec")),
    method("isUpperCase(char)", comment("Unicode spec")),
    method("isUpperCase(int)", comment("Unicode spec")),
    method("isValidCodePoint(int)"),
    method("isWhitespace(char)", comment("Unicode spec")),
    method("isWhitespace(int)", comment("Unicode spec")),
    method("offsetByCodePoints(CharSequence, int, int)"),
    method("offsetByCodePoints(char[], int, int, int, int)"),
    method("reverseBytes(char)"),
    method("toChars(int)"),
    method("toChars(int, char[], int)"),
    method("toCodePoint(char, char)"),
    method("toLowerCase(char)", comment("Unicode spec")),
    method("toLowerCase(int)", comment("Unicode spec")),
    method("toString(char)"),
    method("toTitleCase(char)", comment("Unicode spec")),
    method("toTitleCase(int)", comment("Unicode spec")),
    method("toUpperCase(char)", comment("Unicode spec")),
    method("toUpperCase(int)", comment("Unicode spec")),
    method("valueOf(char)", comment("determinism may depend on non-Equatablity of Character"))),
  instance(method("charValue()"),
    method("compareTo(Character)"),
    method("equals(Object)"),
    method("hashCode()"),
    method("toString()")))
