# Manually audited.
#
# Since fields can't be overridden, should we use a fundamentally
# different approach here than for methods, i.e. hide from fields()
# any fields that are defined by a non-public class?
#
# See some of the notes below -- I'm assuming some things will be
# deterministic based on my understanding of proxies and the like.
class("java.lang.reflect.Field",
  honorary("org.joe_e.Powerless", "org.joe_e.Selfless"),
  instance(method("equals(Object)"),
    method(suppress, "get(Object)", comment("only allowable on fields from public types - use Reflection.get")),
    method("getAnnotation(Class<T>)"),
    method(suppress, "getBoolean(Object)", comment("only allowable on fields from public types - use Reflection.get")),
    method(suppress, "getByte(Object)", comment("only allowable on fields from public types - use Reflection.get")),
    method(suppress, "getChar(Object)", comment("only allowable on fields from public types - use Reflection.get")),
    method(suppress, "getDeclaredAnnotations()", comment("deny for now - ordering not specified")),
    method("getDeclaringClass()"),
    method(suppress, "getDouble(Object)", comment("only allowable on fields from public types - use Reflection.get")),
    method(suppress, "getFloat(Object)", comment("only allowable on fields from public types - use Reflection.get")),
    method("getGenericType()"),
    method(suppress, "getInt(Object)", comment("only allowable on fields from public types - use Reflection.get")),
    method(suppress, "getLong(Object)", comment("only allowable on fields from public types - use Reflection.get")),
    method(suppress, "getModifiers()"),
    method("getName()"), # to my knowledge, field names are not autogenerated in a nondeterministic manner at runtime
    method(suppress, "getShort(Object)", comment("only allowable on fields from public types - use Reflection.get")),
    method("getType()"),
    method("hashCode()"), # safe, but only because proxy classes don't define fields
    method("isEnumConstant()"),
    method("isSynthetic()"),
    method(suppress, "set(Object, Object)", comment("only allowable on fields from public types - use Reflection.set")),
    method(suppress, "setBoolean(Object, boolean)", comment("only allowable on fields from public types - use Reflection.set")),
    method(suppress, "setByte(Object, byte)", comment("only allowable on fields from public types - use Reflection.set")),
    method(suppress, "setChar(Object, char)", comment("only allowable on fields from public types - use Reflection.set")),
    method(suppress, "setDouble(Object, double)", comment("only allowable on fields from public types - use Reflection.set")),
    method(suppress, "setFloat(Object, float)", comment("only allowable on fields from public types - use Reflection.set")),
    method(suppress, "setInt(Object, int)", comment("only allowable on fields from public types - use Reflection.set")),
    method(suppress, "setLong(Object, long)", comment("only allowable on fields from public types - use Reflection.set")),
    method(suppress, "setShort(Object, short)", comment("only allowable on fields from public types - use Reflection.set")),
    method("toGenericString()"), # safe, but only because proxy classes don't define fields
    method("toString()"))) # safe, but only because proxy classes don't define fields
