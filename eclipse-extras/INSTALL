Installation and usage instructions for the Command-line Joe-E Verifier

Requirements:
Java 1.5 or later.  The taming database provided now assumes a Java 1.6
set of class libraries, so 1.6 is strongly recommended.

A working installation of eclipse including Java development tools
(3.3 or later)  Any download from eclipse.org will work except the one
that is specifically for C and C++ development; it just needs to be
unpacked.

Included in this tarball:
(1) The Joe-E for Eclipse plugin.

(2) The Joe-E library 

(3) The latest version of the Joe-E taming database (safej files)

(4) The shell script "verify.sh"

(5) A JAR containing the compiled runtime taming database
    (This class is a link dependency of the Joe-E library used to
    check taming data at runtime.  The included version corresponds
    to the included taming database; a custom version should be built
    with the interactive Eclipse plugin if using a custom taming databse.)

Instructions:
(1) You need to install the Joe-E eclipse plugin somewhere that Eclipse
    can find it.  The easiest way to do this is to drop the
    org.joe_e_2.x.x.jar file into the eclipse/dropins directory of an unpacked
    Eclipse tarball from eclipse.org.

    For a system-wide package-managed install of Eclipse, you can place it in
    the per-user plugins directory, which at least on Debian is located at
    ~/.eclipse/org.eclipse.platform_<version>/plugins.

    On OS X (for sytemwide installation): Put the plugin file into 
    /Applications/eclipse/dropins.

(2) Edit verify.sh, and fill in the three variables at the top of the file.
    For ECLIPSE_PLUGINS_DIR, make sure you put the global plugins directory,
    which might be different from where you moved the Joe-E plugin to. For the
    other two variables, unless you move the library and taming database
    elsewhere, use the full path to this directory, followed by the file names
    (library-2.x.x.jar and taming-20xxxxxx respectively).

(3) Invoke the verify.sh script from the root of the directory containing Joe-E
    source code to verify, or use the -source option to specify a directory
    root for the source code.  You may use the CLASSPATH environment variable
    (or make a customized verify.sh) to specify additional classpath entries
    required to compile your code.

    The verify.sh script takes the following optinos.  They are actually defined
    by the underlying program that the script calls, but their behavior here is
    described assuming that verify.sh is used.

    -source PATH    The path to the source classes to be verified.
                    Defaults to the current directory.
    -taming PATH    The location of the taming database.  This
		    overrides the setting in verify.sh.
    -classpath PATH_OR_JAR[:PATH_OR_JAR]...
                    The compilation classpath, which must include the Joe-E
                    library.  Overrides the setting for the Joe-E library in
		    verify.sh and the CLASSPATH environment variable.
    -markasjoee     Mark all packages as Joe-E packages.
    -fail           Fail if any package isn't Joe-E.
    -verbose        Enable additional debugging output.

Output:
The output currently contains all warnings and errors generated by the Eclipse
and Joe-E build tasks.

The final line gives a total number of errors encountered (compilation or Joe-E
verification errors).  If it says "Build terminated with no errors" your code
passed the verifier.  Note that unless you used the -fail or -markasjoee flag,
some of the code analyzed may not have been declared as Joe-E and thus not
verified.
