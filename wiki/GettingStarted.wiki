#summary Instructions for installing and getting started with Joe-E

*See ChangeLog if you have used Joe-E before.*

= How it works =

Joe-E behaves as a source-level code checker: it examines the source tree and checks that the all the security invariants from [http://www.cs.berkeley.edu/~daw/joe-e/spec-20080203.pdf the Joe-E specification] are respected.

Joe-E consists of the following main parts:
  # the Joe-E library, to link with your Joe-E application;
  # the taming database, specifying what Java library methods are safe to call;
  # the verifier program itself, (currently) implemented as an Eclipse plugin.

The library is an ordinary JAR file.  It provides marker interfaces and utility classes that are useful for Joe-E programs.

The taming database is a collection of files specifying policy on which Java constructors, methods, and fields are allowable for Joe-E code to access.  Since the Java libraries were not designed with capability-security in mind, many of the methods provide ambient authority or ambient nondeterminism.  Without a taming database, you will not be able to access any classes from the Java libraries.  Since java.lang.Object is part of the library, this would be very restrictive indeed.

Note that other than providing some Java code with the Joe-E library, Joe-E does not pre-process the source code or intervene in any way in the compilation process, which is carried out by the Java compiler as usual.  As a consequence, *Joe-E will not prevent you from writing insecure code* unless you take special measures otherwise (such as a unit test that systematically runs the verifier against your codebase).

= Requirements =

Joe-E requires Java 1.5 (not Java 6). Using a later version would require a compatible version of the taming database, as a few additional methods were genericized between 1.5 and 1.6. The taming database provided only works for the Java 1.5 class library.

Joe-E also requires [http://www.eclipse.org/ Eclipse], the popular IDE for Java. There is a command-line version of the verifier too, but it (currently) consists of a wrapper around the Eclipse runtime... In other words, *you have to download and install Eclipse, even if you are not going to use it as an IDE for Joe-E development.* Version 3.3 or greater is required (ie codenames "Europa" or "Ganymede"); if you don't have Eclipse yet, we recommend [http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/ganymedesr1 Eclipse IDE for Java Developers] which is the smallest download with everything you need.  *note that Debian stable currently only includes Eclipse 3.2, which is too old to work with the current version*.  See the [http://wiki.eclipse.org/Eclipse/Installation Eclipse wiki] for instructions on how to install Eclipse.

= Download and install Joe-E =

All components of Joe-E are now available in a single tarball named something like `commandline-x.y.z.tar.gz`.  Get the most recent one from the [/p/joe-e/downloads/list downloads page] and untar it somewhere convenient.

= Set up the command line verifier =

The Joe-E distribution provides a shell script that scans your source tree and produces a plain-text report of all Joe-E security violations found.  This is useful for unit testing (as explained above), or if you won't be using Eclipse for programming; some IDEs, such as Emacs, might be able to process the output of this script directly.

  # Edit the `verify.sh` script from the directory where you untarred Joe-E, and fill in the three variables at the top of the file. For ECLIPSE_PLUGINS_DIR, make sure you put the *global* plugins directory (ie the location of the file `org.eclipse.equinox.launcher.<someversion>.jar`), not a per-user directory.  For the other two variables, use the full path to the respective file names from the tarball (ie `/some/where/library-2.x.x.jar` and `/some/where/taming-200xxxxx` respectively).
  # Try it out from a command prompt: {{{ ./verify.sh -source /your/source/directory }}} This should produce a list of errors on the standard output.

= Using Joe-E with Eclipse =

A much more comfortable way of using Joe-E is from within Eclipse: Joe-E then behaves as another source of compile-time errors that pop up in the edit window and other navigational tools in Eclipse.

To install Joe-E, you can use either the web-based Eclipse Updates magic, or simply copy over some files from the tarball into the Eclipse directories.

== Installing from the Update Wizard ==

open Eclipse and from the menu bar invoke

Help -> Software Updates -> Find and Install...

This brings up a wizard interface.
Click "Search for new features to install" and then "Next" to proceed.

Click "New Remote Site..." and put in a title like "eclipse.joe-e.org"
and for the URL put "http://eclipse.joe-e.org".  Click "OK" to add
it to the list of sites.

Click "Finish".

Dig down and select the "org.joe_e" / "Joe-E Verifer" feature (or just select
the whole site - there's only one feature in it at present) and click Next.

*Note: the Plug-in name has been changed to be more standard -- from "Joe_E"
to "org.joe_e".  We recommend uninstalling before upgrading to the new one,
otherwise you will have two Joe-E plugins with different names.  Sorry for the
confusion.  We also recommend disabling the Joe-E verifier before uninstalling
the old version and re-enabling it after installing the new one.  Forgetting to
do so won't break anything, but it will leave unnecessary traces of the old one
in the .project file.*

Accept the license agreement.  (Believe it or not, it's impossible to
distribute anything via Eclipse Update _without_ a clickthrough agreement; if
you leave it blank, Eclipse refuses to install it.) 

Accept the default install location (or change it), and click Finish.

You will get a nasty warning that the plug-in is not cryptographically signed.
Click Install to choose convenience over security (wins every time!).

Eclipse recommends that you restart.  I just tested it, and it does appear
necessary to do so.  After restarting, you should have the Eclipse plug-in
installed.

== Installing manually ==

The automatic installation has been known to have issues with Eclipse Ganymede in the past.  If that happens, just copy the `org.joe_e_2.x.x.jar` file from the tarball into the `eclipse/dropins` directory of Eclipse 3.4 "Ganymede".  (Eclipse 3.3 "Europa" doesn't have a `dropins` directory, use `eclipse/plugins` instead.)

== Configuration ==

Before using the plugin, you must tell it the location of the taming database.
Choose "Window -> Preferences" ("Eclipse -> Preferences" on a Mac) from the menu
bar, select the Joe-E pane, and select the directory where you placed the taming
files.

== Using the Verifier ==

Before enabling the plug-in for a project, the project must have the Joe-E
library in its classpath.  Add library-2.x.x.jar as an External JAR in the
project's classpath.  This is set in the project's Properties window (obtained by right-clicking and selecting Properties).  Select "Java Build Path" on the left,
the "Libraries" tab at the top, and then "Add External JARs..." on the right.

To enable Joe-E for a project, right-click on it and select 
"Enable Joe-E Verifier".  This is a toggle option, and is checked
when the verifier is enabled.  Enabling the verifier should trigger a full run
of the verifier.  The verifier is configured as a builder in Eclipse, so it
will be run the same way as you run the Java compiler in Eclipse.  If
Auto-Build is on (the default), it will run automatically on a file when it is
modified and saved, or when changes to other files necessitate re-verification.

*Joe-E code is now identified by whether or not the package is annotated with
the org.joe_e.IsJoeE annotation type!*  This can be added to a package by creating a file
named package-info.java in the package directory containing the line
"@org.joe_e.IsJoeE package package.name;" where package.name is the name of the package.
Once you've created this file once, you can copy and paste the file to other projects; Eclipse
is smart enough to fix the package name.  This approach allows Joe-E code to be recognized
efficiently at runtime and eliminates the need to add Joe-E code to the taming database if
shared between projects.

== Running Joe-E Code ==

To run Joe-E code, you will need to have the Joe-E library and an instance of the
org.joe_e.taming.Policy class on the classpath.  This can be added to a Joe-E project
by enabling "Automatically build Policy class" from the project's properties window.
A "standard" version for if you don't have custom taming decisons
will be made available soon as a downloadable JAR.

== Quirks and Tips ==

Immediately after starting Eclipse, the plug-in may seem dead
until the first build triggers it or one UI action (which is lost) is
dispatched to it.  I think that this is a bug in Eclipse.  Just be aware that
the "Enable Joe-E Verifier" context menu item sometimes does nothing
the first time you select it other than activate itself and make the checkmark
status visible when the menu is subsequently opened.

Also note that when starting up, if the workspace remembers a previous run of
the verifier and is still displaying its results, a new run will not be
triggered until some file in the workspace changes or a "Clean Build" is
triggered.  It's always possible to trigger a rebuild of a particular file
(rather than a whole project) by adding a character and then deleting it,
making Eclipse think that the file has changed.  This should rarely be
necessary, however, as the Joe-E builder tries to automatically re-check files
if a change to some other file could affect the set of errors the verifer will
generate.  Please let me know if there is a case that isn't handled here.

The Filter function in the Problems tab is helpful for searching through a 
large number of errors or hiding some of them.  (It's that funky icon with
the three arrows.)

== Uninstallation ==

You can completely disable or uninstall the verifier from
"Help -> Software Updates -> Manage Configuration".