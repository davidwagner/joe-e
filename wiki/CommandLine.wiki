#summary Installation and Use instructions for the command-line version of the Joe-E verifier

== Installation and Configuration ==

The Joe-E distribution provides a shell script that scans your source tree and produces a plain-text report of all Joe-E security violations found.  This is useful for unit testing (as explained above), or if you won't be using Eclipse for programming; some IDEs, such as Emacs, might be able to process the output of this script directly.

  # Edit the `verify.sh` script from the directory where you untarred Joe-E, and fill in the three variables at the top of the file. For ECLIPSE_PLUGINS_DIR, make sure you put the *global* plugins directory (ie the location of the file `org.eclipse.equinox.launcher.<someversion>.jar`), not a per-user directory.  For the other two variables, use the full path to the respective file names from the tarball (ie `/some/where/library-2.x.x.jar` and `/some/where/taming-200xxxxx` respectively).
  # Try it out from a command prompt: {{{ ./verify.sh -source /your/source/directory }}} This should produce a list of errors on the standard output.

== Use ==

Invoke the `verify.sh` script from the root of the directory containing Joe-E
source code to verify, or use the `-source` option to specify a directory
root for the source code.  You may use the `CLASSPATH` environment variable
(or modify `verify.sh`) to specify additional classpath entries required to
compile your code.

The `verify.sh` script takes the following options.  They are actually defined
by the underlying program that the script calls, but their behavior here is
described assuming that verify.sh is used.

|| `-source PATH` || The path to the source classes to be verified. Defaults to the current directory. ||
|| `-taming PATH` || The location of the taming database.  This overrides the setting in verify.sh ||
|| `-classpath PATH_OR_JAR[:PATH_OR_JAR]...` || The compilation classpath, which must include the Joe-E library.  Overrides the setting for the Joe-E library in verify.sh and the CLASSPATH environment variable ||
|| `-markasjoee` ||  Mark all packages as Joe-E packages. ||
|| `-fail` || Fail if any package isn't Joe-E. ||
|| `-verbose` || Enable additional debugging output. ||

== Interpreting the Output ==

The output currently contains all warnings and errors generated by the Eclipse and Joe-E build tasks.

The final line gives a total number of errors encountered (compilation or Joe-E verification errors).  If it says "Build terminated with no errors" your code passed the verifier.  Note that unless you used the `--fail` or `--markasjoee` flag, some of the code analyzed may not have been declared as Joe-E and thus not verified.