#summary Installation and Use instructions for the command-line version of the Joe-E verifier

== Requirements ==
Java 1.5 or later.  The taming database provided assumes a 1.5
rather than 1.6 set of class libraries, so 1.5 is strongly recommended.

A working installation of eclipse including Java development tools
(3.3 or later)  Any download from eclipse.org will work except the one
that is specifically for C and C++ development; it just needs to be
unpacked.

== Included in the tarball ==

(1) The Joe-E for Eclipse plugin.

(2) The Joe-E library

(3) The latest version of the Joe-E taming database

(4) The shell script "verify.sh"

== Installation ==
You need to install the Joe-E eclipse plugin somewhere that Eclipse
can find it.  The easiest way to do this is to drop the
org.joe_e_2.x.x.jar file into the eclipse/dropins directory of an unpacked
Eclipse 3.4 (Ganymede) tarball from eclipse.org.
[http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/ganymedesr1
This one] is the smallest download with everything you need.
Eclipse 3.3 doesn't have a dropins directory, but you can place it in the
eclipse/plugins directory.

For installer or package-manager installed Eclipse installation, the
location for added plugins varies between distributions.  (On Debian,
and possibly other Linux distributions,
plugins can be added on a per-user basis in the
~/.eclipse/org.eclipse.sdk.ide/updates/eclipse/plugins directory
*but note that Debian only includes Eclipse 3.2, which is too old 
to work with the command-line verifier*  If you have Debian, you'll
have to download a newer version from eclipse.org.

On OS X (for sytemwide installation): Put the plugin file into
/Applications/eclipse/dropins or /Applications/eclipse/plugins

== Configuration ==
Edit verify.sh, and fill in the three variables at the top of the file.
For ECLIPSE_PLUGINS_DIR, make sure you put the global plugins directory,
which might be different from where you moved the Joe-E plugin to. For the
other two variables, unless you move the library and taming database
elsewhere, use the full path to this directory, followed by the file names
(library-2.x.x.jar and taming-200xxxxx respectively).

== Use ==
Invoke the verify.sh script from the root of the directory containing Joe-E
source code to verify, or use the -source option to specify a directory
root for the source code.  You may use the CLASSPATH environment variable
(or modify verify.sh) to specify additional classpath entries required to
compile your code.

The verify.sh script takes the following options.  They are actually defined
by the underlying program that the script calls, but their behavior here is
described assuming that verify.sh is used.


|| `-source PATH` || The path to the source classes to be verified. Defaults to the current directory. ||
|| `-taming PATH` || The location of the taming database.  This overrides the setting in verify.sh ||
|| `-classpath PATH_OR_JAR[:PATH_OR_JAR]...` || The compilation classpath, which must include the Joe-E library.  Overrides the setting for the Joe-E library in verify.sh and the CLASSPATH environment variable ||
|| `-markasjoee` ||  Mark all packages as Joe-E packages. ||
|| `-fail` || Fail if any package isn't Joe-E. ||
|| `-verbose` || Enable additional debugging output. ||
